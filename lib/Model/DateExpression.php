<?php
/**
 * DateExpression
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Keap\Core\V2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.812056
 * Contact: api@keap.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Keap\Core\V2\Model;

use \ArrayAccess;
use \Keap\Core\V2\ObjectSerializer;

/**
 * DateExpression Class Doc Comment
 *
 * @category Class
 * @package  Keap\Core\V2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DateExpression implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DateExpression';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'query' => 'string',
        'parse_start' => 'int',
        'parse_end' => 'int',
        'date_inferred' => 'bool',
        'time_inferred' => 'bool',
        'result' => '\Keap\Core\V2\Model\LogicalDate',
        'recurring' => 'bool',
        'recurse_until' => '\Keap\Core\V2\Model\LogicalDate',
        'complete_match' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'query' => null,
        'parse_start' => 'int32',
        'parse_end' => 'int32',
        'date_inferred' => null,
        'time_inferred' => null,
        'result' => null,
        'recurring' => null,
        'recurse_until' => null,
        'complete_match' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'query' => false,
        'parse_start' => false,
        'parse_end' => false,
        'date_inferred' => false,
        'time_inferred' => false,
        'result' => false,
        'recurring' => false,
        'recurse_until' => false,
        'complete_match' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'query' => 'query',
        'parse_start' => 'parse_start',
        'parse_end' => 'parse_end',
        'date_inferred' => 'date_inferred',
        'time_inferred' => 'time_inferred',
        'result' => 'result',
        'recurring' => 'recurring',
        'recurse_until' => 'recurse_until',
        'complete_match' => 'complete_match'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'query' => 'setQuery',
        'parse_start' => 'setParseStart',
        'parse_end' => 'setParseEnd',
        'date_inferred' => 'setDateInferred',
        'time_inferred' => 'setTimeInferred',
        'result' => 'setResult',
        'recurring' => 'setRecurring',
        'recurse_until' => 'setRecurseUntil',
        'complete_match' => 'setCompleteMatch'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'query' => 'getQuery',
        'parse_start' => 'getParseStart',
        'parse_end' => 'getParseEnd',
        'date_inferred' => 'getDateInferred',
        'time_inferred' => 'getTimeInferred',
        'result' => 'getResult',
        'recurring' => 'getRecurring',
        'recurse_until' => 'getRecurseUntil',
        'complete_match' => 'getCompleteMatch'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('query', $data ?? [], null);
        $this->setIfExists('parse_start', $data ?? [], null);
        $this->setIfExists('parse_end', $data ?? [], null);
        $this->setIfExists('date_inferred', $data ?? [], null);
        $this->setIfExists('time_inferred', $data ?? [], null);
        $this->setIfExists('result', $data ?? [], null);
        $this->setIfExists('recurring', $data ?? [], null);
        $this->setIfExists('recurse_until', $data ?? [], null);
        $this->setIfExists('complete_match', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['query'] === null) {
            $invalidProperties[] = "'query' can't be null";
        }
        if ($this->container['parse_start'] === null) {
            $invalidProperties[] = "'parse_start' can't be null";
        }
        if ($this->container['parse_end'] === null) {
            $invalidProperties[] = "'parse_end' can't be null";
        }
        if ($this->container['date_inferred'] === null) {
            $invalidProperties[] = "'date_inferred' can't be null";
        }
        if ($this->container['time_inferred'] === null) {
            $invalidProperties[] = "'time_inferred' can't be null";
        }
        if ($this->container['result'] === null) {
            $invalidProperties[] = "'result' can't be null";
        }
        if ($this->container['recurring'] === null) {
            $invalidProperties[] = "'recurring' can't be null";
        }
        if ($this->container['recurse_until'] === null) {
            $invalidProperties[] = "'recurse_until' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets query
     *
     * @return string
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     *
     * @param string $query query
     *
     * @return self
     */
    public function setQuery($query)
    {
        if (is_null($query)) {
            throw new \InvalidArgumentException('non-nullable query cannot be null');
        }
        $this->container['query'] = $query;

        return $this;
    }

    /**
     * Gets parse_start
     *
     * @return int
     */
    public function getParseStart()
    {
        return $this->container['parse_start'];
    }

    /**
     * Sets parse_start
     *
     * @param int $parse_start Where in the expression this date exists (start)
     *
     * @return self
     */
    public function setParseStart($parse_start)
    {
        if (is_null($parse_start)) {
            throw new \InvalidArgumentException('non-nullable parse_start cannot be null');
        }
        $this->container['parse_start'] = $parse_start;

        return $this;
    }

    /**
     * Gets parse_end
     *
     * @return int
     */
    public function getParseEnd()
    {
        return $this->container['parse_end'];
    }

    /**
     * Sets parse_end
     *
     * @param int $parse_end Where in the expression this date exists
     *
     * @return self
     */
    public function setParseEnd($parse_end)
    {
        if (is_null($parse_end)) {
            throw new \InvalidArgumentException('non-nullable parse_end cannot be null');
        }
        $this->container['parse_end'] = $parse_end;

        return $this;
    }

    /**
     * Gets date_inferred
     *
     * @return bool
     */
    public function getDateInferred()
    {
        return $this->container['date_inferred'];
    }

    /**
     * Sets date_inferred
     *
     * @param bool $date_inferred Whether the date portion of the results has been inferred (and can be ignored)
     *
     * @return self
     */
    public function setDateInferred($date_inferred)
    {
        if (is_null($date_inferred)) {
            throw new \InvalidArgumentException('non-nullable date_inferred cannot be null');
        }
        $this->container['date_inferred'] = $date_inferred;

        return $this;
    }

    /**
     * Gets time_inferred
     *
     * @return bool
     */
    public function getTimeInferred()
    {
        return $this->container['time_inferred'];
    }

    /**
     * Sets time_inferred
     *
     * @param bool $time_inferred Whether the time portion of the results has been inferred (and can be ignored)
     *
     * @return self
     */
    public function setTimeInferred($time_inferred)
    {
        if (is_null($time_inferred)) {
            throw new \InvalidArgumentException('non-nullable time_inferred cannot be null');
        }
        $this->container['time_inferred'] = $time_inferred;

        return $this;
    }

    /**
     * Gets result
     *
     * @return \Keap\Core\V2\Model\LogicalDate
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param \Keap\Core\V2\Model\LogicalDate $result result
     *
     * @return self
     */
    public function setResult($result)
    {
        if (is_null($result)) {
            throw new \InvalidArgumentException('non-nullable result cannot be null');
        }
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets recurring
     *
     * @return bool
     */
    public function getRecurring()
    {
        return $this->container['recurring'];
    }

    /**
     * Sets recurring
     *
     * @param bool $recurring Whether the results are recurring
     *
     * @return self
     */
    public function setRecurring($recurring)
    {
        if (is_null($recurring)) {
            throw new \InvalidArgumentException('non-nullable recurring cannot be null');
        }
        $this->container['recurring'] = $recurring;

        return $this;
    }

    /**
     * Gets recurse_until
     *
     * @return \Keap\Core\V2\Model\LogicalDate
     */
    public function getRecurseUntil()
    {
        return $this->container['recurse_until'];
    }

    /**
     * Sets recurse_until
     *
     * @param \Keap\Core\V2\Model\LogicalDate $recurse_until If recurring, when the recurrence ends
     *
     * @return self
     */
    public function setRecurseUntil($recurse_until)
    {
        if (is_null($recurse_until)) {
            throw new \InvalidArgumentException('non-nullable recurse_until cannot be null');
        }
        $this->container['recurse_until'] = $recurse_until;

        return $this;
    }

    /**
     * Gets complete_match
     *
     * @return bool|null
     */
    public function getCompleteMatch()
    {
        return $this->container['complete_match'];
    }

    /**
     * Sets complete_match
     *
     * @param bool|null $complete_match complete_match
     *
     * @return self
     */
    public function setCompleteMatch($complete_match)
    {
        if (is_null($complete_match)) {
            array_push($this->openAPINullablesSetToNull, 'complete_match');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('complete_match', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['complete_match'] = $complete_match;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


