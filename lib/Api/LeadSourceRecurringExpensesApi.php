<?php
/**
 * LeadSourceRecurringExpensesApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Keap\Core\V2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.812056
 * Contact: api@keap.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Keap\Core\V2\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Keap\Core\V2\ApiException;
use Keap\Core\V2\Configuration;
use Keap\Core\V2\FormDataProcessor;
use Keap\Core\V2\HeaderSelector;
use Keap\Core\V2\ObjectSerializer;

/**
 * LeadSourceRecurringExpensesApi Class Doc Comment
 *
 * @category Class
 * @package  Keap\Core\V2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LeadSourceRecurringExpensesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createLeadSourceRecurringExpenseUsingPOST' => [
            'application/json',
        ],
        'deleteLeadSourceRecurringExpenseUsingDELETE' => [
            'application/json',
        ],
        'getLeadSourceRecurringExpenseUsingGET' => [
            'application/json',
        ],
        'listExpensesIncurredFromLeadSourceRecurringExpenseUsingGET' => [
            'application/json',
        ],
        'listLeadSourceRecurringExpensesUsingGET' => [
            'application/json',
        ],
        'updateLeadSourceRecurringExpenseUsingPATCH' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createLeadSourceRecurringExpenseUsingPOST
     *
     * Create a Lead Source Recurring Expense
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  \Keap\Core\V2\Model\CreateLeadSourceRecurringExpenseRequest $create_lead_source_recurring_expense_request The request object to create a new lead source recurring expense (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLeadSourceRecurringExpenseUsingPOST'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\LeadSourceRecurringExpense|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error
     */
    public function createLeadSourceRecurringExpenseUsingPOST($lead_source_id, $create_lead_source_recurring_expense_request, string $contentType = self::contentTypes['createLeadSourceRecurringExpenseUsingPOST'][0])
    {
        list($response) = $this->createLeadSourceRecurringExpenseUsingPOSTWithHttpInfo($lead_source_id, $create_lead_source_recurring_expense_request, $contentType);
        return $response;
    }

    /**
     * Operation createLeadSourceRecurringExpenseUsingPOSTWithHttpInfo
     *
     * Create a Lead Source Recurring Expense
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  \Keap\Core\V2\Model\CreateLeadSourceRecurringExpenseRequest $create_lead_source_recurring_expense_request The request object to create a new lead source recurring expense (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLeadSourceRecurringExpenseUsingPOST'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\LeadSourceRecurringExpense|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLeadSourceRecurringExpenseUsingPOSTWithHttpInfo($lead_source_id, $create_lead_source_recurring_expense_request, string $contentType = self::contentTypes['createLeadSourceRecurringExpenseUsingPOST'][0])
    {
        $request = $this->createLeadSourceRecurringExpenseUsingPOSTRequest($lead_source_id, $create_lead_source_recurring_expense_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\LeadSourceRecurringExpense',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\LeadSourceRecurringExpense',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\LeadSourceRecurringExpense',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createLeadSourceRecurringExpenseUsingPOSTAsync
     *
     * Create a Lead Source Recurring Expense
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  \Keap\Core\V2\Model\CreateLeadSourceRecurringExpenseRequest $create_lead_source_recurring_expense_request The request object to create a new lead source recurring expense (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLeadSourceRecurringExpenseUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLeadSourceRecurringExpenseUsingPOSTAsync($lead_source_id, $create_lead_source_recurring_expense_request, string $contentType = self::contentTypes['createLeadSourceRecurringExpenseUsingPOST'][0])
    {
        return $this->createLeadSourceRecurringExpenseUsingPOSTAsyncWithHttpInfo($lead_source_id, $create_lead_source_recurring_expense_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createLeadSourceRecurringExpenseUsingPOSTAsyncWithHttpInfo
     *
     * Create a Lead Source Recurring Expense
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  \Keap\Core\V2\Model\CreateLeadSourceRecurringExpenseRequest $create_lead_source_recurring_expense_request The request object to create a new lead source recurring expense (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLeadSourceRecurringExpenseUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLeadSourceRecurringExpenseUsingPOSTAsyncWithHttpInfo($lead_source_id, $create_lead_source_recurring_expense_request, string $contentType = self::contentTypes['createLeadSourceRecurringExpenseUsingPOST'][0])
    {
        $returnType = '\Keap\Core\V2\Model\LeadSourceRecurringExpense';
        $request = $this->createLeadSourceRecurringExpenseUsingPOSTRequest($lead_source_id, $create_lead_source_recurring_expense_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createLeadSourceRecurringExpenseUsingPOST'
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  \Keap\Core\V2\Model\CreateLeadSourceRecurringExpenseRequest $create_lead_source_recurring_expense_request The request object to create a new lead source recurring expense (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLeadSourceRecurringExpenseUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createLeadSourceRecurringExpenseUsingPOSTRequest($lead_source_id, $create_lead_source_recurring_expense_request, string $contentType = self::contentTypes['createLeadSourceRecurringExpenseUsingPOST'][0])
    {

        // verify the required parameter 'lead_source_id' is set
        if ($lead_source_id === null || (is_array($lead_source_id) && count($lead_source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_source_id when calling createLeadSourceRecurringExpenseUsingPOST'
            );
        }

        // verify the required parameter 'create_lead_source_recurring_expense_request' is set
        if ($create_lead_source_recurring_expense_request === null || (is_array($create_lead_source_recurring_expense_request) && count($create_lead_source_recurring_expense_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_lead_source_recurring_expense_request when calling createLeadSourceRecurringExpenseUsingPOST'
            );
        }


        $resourcePath = '/v2/leadSources/{lead_source_id}/recurringExpenses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($lead_source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lead_source_id' . '}',
                ObjectSerializer::toPathValue($lead_source_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_lead_source_recurring_expense_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_lead_source_recurring_expense_request));
            } else {
                $httpBody = $create_lead_source_recurring_expense_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLeadSourceRecurringExpenseUsingDELETE
     *
     * Delete a Lead Source Recurring Expense
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  string $lead_source_recurring_expense_id The ID of a lead source recurring expense (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLeadSourceRecurringExpenseUsingDELETE'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteLeadSourceRecurringExpenseUsingDELETE($lead_source_id, $lead_source_recurring_expense_id, string $contentType = self::contentTypes['deleteLeadSourceRecurringExpenseUsingDELETE'][0])
    {
        $this->deleteLeadSourceRecurringExpenseUsingDELETEWithHttpInfo($lead_source_id, $lead_source_recurring_expense_id, $contentType);
    }

    /**
     * Operation deleteLeadSourceRecurringExpenseUsingDELETEWithHttpInfo
     *
     * Delete a Lead Source Recurring Expense
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  string $lead_source_recurring_expense_id The ID of a lead source recurring expense (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLeadSourceRecurringExpenseUsingDELETE'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLeadSourceRecurringExpenseUsingDELETEWithHttpInfo($lead_source_id, $lead_source_recurring_expense_id, string $contentType = self::contentTypes['deleteLeadSourceRecurringExpenseUsingDELETE'][0])
    {
        $request = $this->deleteLeadSourceRecurringExpenseUsingDELETERequest($lead_source_id, $lead_source_recurring_expense_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteLeadSourceRecurringExpenseUsingDELETEAsync
     *
     * Delete a Lead Source Recurring Expense
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  string $lead_source_recurring_expense_id The ID of a lead source recurring expense (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLeadSourceRecurringExpenseUsingDELETE'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLeadSourceRecurringExpenseUsingDELETEAsync($lead_source_id, $lead_source_recurring_expense_id, string $contentType = self::contentTypes['deleteLeadSourceRecurringExpenseUsingDELETE'][0])
    {
        return $this->deleteLeadSourceRecurringExpenseUsingDELETEAsyncWithHttpInfo($lead_source_id, $lead_source_recurring_expense_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLeadSourceRecurringExpenseUsingDELETEAsyncWithHttpInfo
     *
     * Delete a Lead Source Recurring Expense
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  string $lead_source_recurring_expense_id The ID of a lead source recurring expense (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLeadSourceRecurringExpenseUsingDELETE'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLeadSourceRecurringExpenseUsingDELETEAsyncWithHttpInfo($lead_source_id, $lead_source_recurring_expense_id, string $contentType = self::contentTypes['deleteLeadSourceRecurringExpenseUsingDELETE'][0])
    {
        $returnType = '';
        $request = $this->deleteLeadSourceRecurringExpenseUsingDELETERequest($lead_source_id, $lead_source_recurring_expense_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLeadSourceRecurringExpenseUsingDELETE'
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  string $lead_source_recurring_expense_id The ID of a lead source recurring expense (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLeadSourceRecurringExpenseUsingDELETE'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteLeadSourceRecurringExpenseUsingDELETERequest($lead_source_id, $lead_source_recurring_expense_id, string $contentType = self::contentTypes['deleteLeadSourceRecurringExpenseUsingDELETE'][0])
    {

        // verify the required parameter 'lead_source_id' is set
        if ($lead_source_id === null || (is_array($lead_source_id) && count($lead_source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_source_id when calling deleteLeadSourceRecurringExpenseUsingDELETE'
            );
        }

        // verify the required parameter 'lead_source_recurring_expense_id' is set
        if ($lead_source_recurring_expense_id === null || (is_array($lead_source_recurring_expense_id) && count($lead_source_recurring_expense_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_source_recurring_expense_id when calling deleteLeadSourceRecurringExpenseUsingDELETE'
            );
        }


        $resourcePath = '/v2/leadSources/{lead_source_id}/recurringExpenses/{lead_source_recurring_expense_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($lead_source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lead_source_id' . '}',
                ObjectSerializer::toPathValue($lead_source_id),
                $resourcePath
            );
        }
        // path params
        if ($lead_source_recurring_expense_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lead_source_recurring_expense_id' . '}',
                ObjectSerializer::toPathValue($lead_source_recurring_expense_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLeadSourceRecurringExpenseUsingGET
     *
     * Retrieve a Lead Source Recurring Expense
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  string $lead_source_recurring_expense_id The ID of a lead source recurring expense (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLeadSourceRecurringExpenseUsingGET'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\LeadSourceRecurringExpense|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error
     */
    public function getLeadSourceRecurringExpenseUsingGET($lead_source_id, $lead_source_recurring_expense_id, string $contentType = self::contentTypes['getLeadSourceRecurringExpenseUsingGET'][0])
    {
        list($response) = $this->getLeadSourceRecurringExpenseUsingGETWithHttpInfo($lead_source_id, $lead_source_recurring_expense_id, $contentType);
        return $response;
    }

    /**
     * Operation getLeadSourceRecurringExpenseUsingGETWithHttpInfo
     *
     * Retrieve a Lead Source Recurring Expense
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  string $lead_source_recurring_expense_id The ID of a lead source recurring expense (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLeadSourceRecurringExpenseUsingGET'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\LeadSourceRecurringExpense|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLeadSourceRecurringExpenseUsingGETWithHttpInfo($lead_source_id, $lead_source_recurring_expense_id, string $contentType = self::contentTypes['getLeadSourceRecurringExpenseUsingGET'][0])
    {
        $request = $this->getLeadSourceRecurringExpenseUsingGETRequest($lead_source_id, $lead_source_recurring_expense_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\LeadSourceRecurringExpense',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\LeadSourceRecurringExpense',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\LeadSourceRecurringExpense',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getLeadSourceRecurringExpenseUsingGETAsync
     *
     * Retrieve a Lead Source Recurring Expense
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  string $lead_source_recurring_expense_id The ID of a lead source recurring expense (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLeadSourceRecurringExpenseUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadSourceRecurringExpenseUsingGETAsync($lead_source_id, $lead_source_recurring_expense_id, string $contentType = self::contentTypes['getLeadSourceRecurringExpenseUsingGET'][0])
    {
        return $this->getLeadSourceRecurringExpenseUsingGETAsyncWithHttpInfo($lead_source_id, $lead_source_recurring_expense_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLeadSourceRecurringExpenseUsingGETAsyncWithHttpInfo
     *
     * Retrieve a Lead Source Recurring Expense
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  string $lead_source_recurring_expense_id The ID of a lead source recurring expense (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLeadSourceRecurringExpenseUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLeadSourceRecurringExpenseUsingGETAsyncWithHttpInfo($lead_source_id, $lead_source_recurring_expense_id, string $contentType = self::contentTypes['getLeadSourceRecurringExpenseUsingGET'][0])
    {
        $returnType = '\Keap\Core\V2\Model\LeadSourceRecurringExpense';
        $request = $this->getLeadSourceRecurringExpenseUsingGETRequest($lead_source_id, $lead_source_recurring_expense_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLeadSourceRecurringExpenseUsingGET'
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  string $lead_source_recurring_expense_id The ID of a lead source recurring expense (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLeadSourceRecurringExpenseUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLeadSourceRecurringExpenseUsingGETRequest($lead_source_id, $lead_source_recurring_expense_id, string $contentType = self::contentTypes['getLeadSourceRecurringExpenseUsingGET'][0])
    {

        // verify the required parameter 'lead_source_id' is set
        if ($lead_source_id === null || (is_array($lead_source_id) && count($lead_source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_source_id when calling getLeadSourceRecurringExpenseUsingGET'
            );
        }

        // verify the required parameter 'lead_source_recurring_expense_id' is set
        if ($lead_source_recurring_expense_id === null || (is_array($lead_source_recurring_expense_id) && count($lead_source_recurring_expense_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_source_recurring_expense_id when calling getLeadSourceRecurringExpenseUsingGET'
            );
        }


        $resourcePath = '/v2/leadSources/{lead_source_id}/recurringExpenses/{lead_source_recurring_expense_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($lead_source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lead_source_id' . '}',
                ObjectSerializer::toPathValue($lead_source_id),
                $resourcePath
            );
        }
        // path params
        if ($lead_source_recurring_expense_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lead_source_recurring_expense_id' . '}',
                ObjectSerializer::toPathValue($lead_source_recurring_expense_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listExpensesIncurredFromLeadSourceRecurringExpenseUsingGET
     *
     * Retrieves a list of expenses incurred from a recurring expense
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  string $lead_source_recurring_expense_id The ID of a lead source recurring expense (required)
     * @param  string|null $filter Filter to apply, allowed fields are:  - (String) &#x60;title&#x60; - (Long) &#x60;amount&#x60; - (String) &#x60;incurred_time&#x60; - (String) &#x60;create_time&#x60; - (String) &#x60;update_time&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;amount%3D%3D2500&#x60; - &#x60;filter&#x3D;incurred_time%3D%3D2024-12-22T01:00:00.000Z&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields:  - &#x60;title&#x60; - &#x60;amount&#x60; - &#x60;incurred_time&#x60; - &#x60;create_time&#x60; - &#x60;update_time&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listExpensesIncurredFromLeadSourceRecurringExpenseUsingGET'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\ListLeadSourceExpensesResponse|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error
     */
    public function listExpensesIncurredFromLeadSourceRecurringExpenseUsingGET($lead_source_id, $lead_source_recurring_expense_id, $filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listExpensesIncurredFromLeadSourceRecurringExpenseUsingGET'][0])
    {
        list($response) = $this->listExpensesIncurredFromLeadSourceRecurringExpenseUsingGETWithHttpInfo($lead_source_id, $lead_source_recurring_expense_id, $filter, $order_by, $page_size, $page_token, $contentType);
        return $response;
    }

    /**
     * Operation listExpensesIncurredFromLeadSourceRecurringExpenseUsingGETWithHttpInfo
     *
     * Retrieves a list of expenses incurred from a recurring expense
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  string $lead_source_recurring_expense_id The ID of a lead source recurring expense (required)
     * @param  string|null $filter Filter to apply, allowed fields are:  - (String) &#x60;title&#x60; - (Long) &#x60;amount&#x60; - (String) &#x60;incurred_time&#x60; - (String) &#x60;create_time&#x60; - (String) &#x60;update_time&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;amount%3D%3D2500&#x60; - &#x60;filter&#x3D;incurred_time%3D%3D2024-12-22T01:00:00.000Z&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields:  - &#x60;title&#x60; - &#x60;amount&#x60; - &#x60;incurred_time&#x60; - &#x60;create_time&#x60; - &#x60;update_time&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listExpensesIncurredFromLeadSourceRecurringExpenseUsingGET'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\ListLeadSourceExpensesResponse|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function listExpensesIncurredFromLeadSourceRecurringExpenseUsingGETWithHttpInfo($lead_source_id, $lead_source_recurring_expense_id, $filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listExpensesIncurredFromLeadSourceRecurringExpenseUsingGET'][0])
    {
        $request = $this->listExpensesIncurredFromLeadSourceRecurringExpenseUsingGETRequest($lead_source_id, $lead_source_recurring_expense_id, $filter, $order_by, $page_size, $page_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\ListLeadSourceExpensesResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\ListLeadSourceExpensesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\ListLeadSourceExpensesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listExpensesIncurredFromLeadSourceRecurringExpenseUsingGETAsync
     *
     * Retrieves a list of expenses incurred from a recurring expense
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  string $lead_source_recurring_expense_id The ID of a lead source recurring expense (required)
     * @param  string|null $filter Filter to apply, allowed fields are:  - (String) &#x60;title&#x60; - (Long) &#x60;amount&#x60; - (String) &#x60;incurred_time&#x60; - (String) &#x60;create_time&#x60; - (String) &#x60;update_time&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;amount%3D%3D2500&#x60; - &#x60;filter&#x3D;incurred_time%3D%3D2024-12-22T01:00:00.000Z&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields:  - &#x60;title&#x60; - &#x60;amount&#x60; - &#x60;incurred_time&#x60; - &#x60;create_time&#x60; - &#x60;update_time&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listExpensesIncurredFromLeadSourceRecurringExpenseUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listExpensesIncurredFromLeadSourceRecurringExpenseUsingGETAsync($lead_source_id, $lead_source_recurring_expense_id, $filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listExpensesIncurredFromLeadSourceRecurringExpenseUsingGET'][0])
    {
        return $this->listExpensesIncurredFromLeadSourceRecurringExpenseUsingGETAsyncWithHttpInfo($lead_source_id, $lead_source_recurring_expense_id, $filter, $order_by, $page_size, $page_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listExpensesIncurredFromLeadSourceRecurringExpenseUsingGETAsyncWithHttpInfo
     *
     * Retrieves a list of expenses incurred from a recurring expense
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  string $lead_source_recurring_expense_id The ID of a lead source recurring expense (required)
     * @param  string|null $filter Filter to apply, allowed fields are:  - (String) &#x60;title&#x60; - (Long) &#x60;amount&#x60; - (String) &#x60;incurred_time&#x60; - (String) &#x60;create_time&#x60; - (String) &#x60;update_time&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;amount%3D%3D2500&#x60; - &#x60;filter&#x3D;incurred_time%3D%3D2024-12-22T01:00:00.000Z&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields:  - &#x60;title&#x60; - &#x60;amount&#x60; - &#x60;incurred_time&#x60; - &#x60;create_time&#x60; - &#x60;update_time&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listExpensesIncurredFromLeadSourceRecurringExpenseUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listExpensesIncurredFromLeadSourceRecurringExpenseUsingGETAsyncWithHttpInfo($lead_source_id, $lead_source_recurring_expense_id, $filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listExpensesIncurredFromLeadSourceRecurringExpenseUsingGET'][0])
    {
        $returnType = '\Keap\Core\V2\Model\ListLeadSourceExpensesResponse';
        $request = $this->listExpensesIncurredFromLeadSourceRecurringExpenseUsingGETRequest($lead_source_id, $lead_source_recurring_expense_id, $filter, $order_by, $page_size, $page_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listExpensesIncurredFromLeadSourceRecurringExpenseUsingGET'
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  string $lead_source_recurring_expense_id The ID of a lead source recurring expense (required)
     * @param  string|null $filter Filter to apply, allowed fields are:  - (String) &#x60;title&#x60; - (Long) &#x60;amount&#x60; - (String) &#x60;incurred_time&#x60; - (String) &#x60;create_time&#x60; - (String) &#x60;update_time&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;amount%3D%3D2500&#x60; - &#x60;filter&#x3D;incurred_time%3D%3D2024-12-22T01:00:00.000Z&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields:  - &#x60;title&#x60; - &#x60;amount&#x60; - &#x60;incurred_time&#x60; - &#x60;create_time&#x60; - &#x60;update_time&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listExpensesIncurredFromLeadSourceRecurringExpenseUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listExpensesIncurredFromLeadSourceRecurringExpenseUsingGETRequest($lead_source_id, $lead_source_recurring_expense_id, $filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listExpensesIncurredFromLeadSourceRecurringExpenseUsingGET'][0])
    {

        // verify the required parameter 'lead_source_id' is set
        if ($lead_source_id === null || (is_array($lead_source_id) && count($lead_source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_source_id when calling listExpensesIncurredFromLeadSourceRecurringExpenseUsingGET'
            );
        }

        // verify the required parameter 'lead_source_recurring_expense_id' is set
        if ($lead_source_recurring_expense_id === null || (is_array($lead_source_recurring_expense_id) && count($lead_source_recurring_expense_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_source_recurring_expense_id when calling listExpensesIncurredFromLeadSourceRecurringExpenseUsingGET'
            );
        }



        if ($page_size !== null && $page_size > 1000) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling LeadSourceRecurringExpensesApi.listExpensesIncurredFromLeadSourceRecurringExpenseUsingGET, must be smaller than or equal to 1000.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling LeadSourceRecurringExpensesApi.listExpensesIncurredFromLeadSourceRecurringExpenseUsingGET, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v2/leadSources/{lead_source_id}/recurringExpenses/{lead_source_recurring_expense_id}/expenses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'order_by', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_token,
            'page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($lead_source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lead_source_id' . '}',
                ObjectSerializer::toPathValue($lead_source_id),
                $resourcePath
            );
        }
        // path params
        if ($lead_source_recurring_expense_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lead_source_recurring_expense_id' . '}',
                ObjectSerializer::toPathValue($lead_source_recurring_expense_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listLeadSourceRecurringExpensesUsingGET
     *
     * Retrieves a list of lead source recurring expenses
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  string|null $filter Filter to apply, allowed fields are:  - (String) &#x60;title&#x60; - (Long) &#x60;amount&#x60; - (String) &#x60;start_time&#x60; - (String) &#x60;end_time&#x60; - (String) &#x60;next_expense_time&#x60; - (String) &#x60;create_time&#x60; - (String) &#x60;update_time&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;amount%3D%3D2500&#x60; - &#x60;filter&#x3D;next_expense_time%3D%3D2024-12-22T01:00:00.000Z&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields: - &#x60;title&#x60; - &#x60;amount&#x60; - &#x60;start_time&#x60; - &#x60;end_time&#x60; - &#x60;next_expense_time&#x60; - &#x60;create_time&#x60; - &#x60;update_time&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLeadSourceRecurringExpensesUsingGET'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\ListLeadSourceRecurringExpensesResponse|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error
     */
    public function listLeadSourceRecurringExpensesUsingGET($lead_source_id, $filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listLeadSourceRecurringExpensesUsingGET'][0])
    {
        list($response) = $this->listLeadSourceRecurringExpensesUsingGETWithHttpInfo($lead_source_id, $filter, $order_by, $page_size, $page_token, $contentType);
        return $response;
    }

    /**
     * Operation listLeadSourceRecurringExpensesUsingGETWithHttpInfo
     *
     * Retrieves a list of lead source recurring expenses
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  string|null $filter Filter to apply, allowed fields are:  - (String) &#x60;title&#x60; - (Long) &#x60;amount&#x60; - (String) &#x60;start_time&#x60; - (String) &#x60;end_time&#x60; - (String) &#x60;next_expense_time&#x60; - (String) &#x60;create_time&#x60; - (String) &#x60;update_time&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;amount%3D%3D2500&#x60; - &#x60;filter&#x3D;next_expense_time%3D%3D2024-12-22T01:00:00.000Z&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields: - &#x60;title&#x60; - &#x60;amount&#x60; - &#x60;start_time&#x60; - &#x60;end_time&#x60; - &#x60;next_expense_time&#x60; - &#x60;create_time&#x60; - &#x60;update_time&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLeadSourceRecurringExpensesUsingGET'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\ListLeadSourceRecurringExpensesResponse|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function listLeadSourceRecurringExpensesUsingGETWithHttpInfo($lead_source_id, $filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listLeadSourceRecurringExpensesUsingGET'][0])
    {
        $request = $this->listLeadSourceRecurringExpensesUsingGETRequest($lead_source_id, $filter, $order_by, $page_size, $page_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\ListLeadSourceRecurringExpensesResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\ListLeadSourceRecurringExpensesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\ListLeadSourceRecurringExpensesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listLeadSourceRecurringExpensesUsingGETAsync
     *
     * Retrieves a list of lead source recurring expenses
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  string|null $filter Filter to apply, allowed fields are:  - (String) &#x60;title&#x60; - (Long) &#x60;amount&#x60; - (String) &#x60;start_time&#x60; - (String) &#x60;end_time&#x60; - (String) &#x60;next_expense_time&#x60; - (String) &#x60;create_time&#x60; - (String) &#x60;update_time&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;amount%3D%3D2500&#x60; - &#x60;filter&#x3D;next_expense_time%3D%3D2024-12-22T01:00:00.000Z&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields: - &#x60;title&#x60; - &#x60;amount&#x60; - &#x60;start_time&#x60; - &#x60;end_time&#x60; - &#x60;next_expense_time&#x60; - &#x60;create_time&#x60; - &#x60;update_time&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLeadSourceRecurringExpensesUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listLeadSourceRecurringExpensesUsingGETAsync($lead_source_id, $filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listLeadSourceRecurringExpensesUsingGET'][0])
    {
        return $this->listLeadSourceRecurringExpensesUsingGETAsyncWithHttpInfo($lead_source_id, $filter, $order_by, $page_size, $page_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listLeadSourceRecurringExpensesUsingGETAsyncWithHttpInfo
     *
     * Retrieves a list of lead source recurring expenses
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  string|null $filter Filter to apply, allowed fields are:  - (String) &#x60;title&#x60; - (Long) &#x60;amount&#x60; - (String) &#x60;start_time&#x60; - (String) &#x60;end_time&#x60; - (String) &#x60;next_expense_time&#x60; - (String) &#x60;create_time&#x60; - (String) &#x60;update_time&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;amount%3D%3D2500&#x60; - &#x60;filter&#x3D;next_expense_time%3D%3D2024-12-22T01:00:00.000Z&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields: - &#x60;title&#x60; - &#x60;amount&#x60; - &#x60;start_time&#x60; - &#x60;end_time&#x60; - &#x60;next_expense_time&#x60; - &#x60;create_time&#x60; - &#x60;update_time&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLeadSourceRecurringExpensesUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listLeadSourceRecurringExpensesUsingGETAsyncWithHttpInfo($lead_source_id, $filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listLeadSourceRecurringExpensesUsingGET'][0])
    {
        $returnType = '\Keap\Core\V2\Model\ListLeadSourceRecurringExpensesResponse';
        $request = $this->listLeadSourceRecurringExpensesUsingGETRequest($lead_source_id, $filter, $order_by, $page_size, $page_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listLeadSourceRecurringExpensesUsingGET'
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  string|null $filter Filter to apply, allowed fields are:  - (String) &#x60;title&#x60; - (Long) &#x60;amount&#x60; - (String) &#x60;start_time&#x60; - (String) &#x60;end_time&#x60; - (String) &#x60;next_expense_time&#x60; - (String) &#x60;create_time&#x60; - (String) &#x60;update_time&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;amount%3D%3D2500&#x60; - &#x60;filter&#x3D;next_expense_time%3D%3D2024-12-22T01:00:00.000Z&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields: - &#x60;title&#x60; - &#x60;amount&#x60; - &#x60;start_time&#x60; - &#x60;end_time&#x60; - &#x60;next_expense_time&#x60; - &#x60;create_time&#x60; - &#x60;update_time&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLeadSourceRecurringExpensesUsingGET'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listLeadSourceRecurringExpensesUsingGETRequest($lead_source_id, $filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listLeadSourceRecurringExpensesUsingGET'][0])
    {

        // verify the required parameter 'lead_source_id' is set
        if ($lead_source_id === null || (is_array($lead_source_id) && count($lead_source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_source_id when calling listLeadSourceRecurringExpensesUsingGET'
            );
        }



        if ($page_size !== null && $page_size > 1000) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling LeadSourceRecurringExpensesApi.listLeadSourceRecurringExpensesUsingGET, must be smaller than or equal to 1000.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling LeadSourceRecurringExpensesApi.listLeadSourceRecurringExpensesUsingGET, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v2/leadSources/{lead_source_id}/recurringExpenses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'order_by', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_token,
            'page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($lead_source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lead_source_id' . '}',
                ObjectSerializer::toPathValue($lead_source_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLeadSourceRecurringExpenseUsingPATCH
     *
     * Update a Lead Source Recurring Expense
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  string $lead_source_recurring_expense_id The ID of a lead source recurring expense (required)
     * @param  \Keap\Core\V2\Model\LeadSourceRecurringExpenseUpdateRequest $lead_source_recurring_expense_update_request The request object to update a lead source recurring expense (required)
     * @param  string[]|null $update_mask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLeadSourceRecurringExpenseUsingPATCH'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\LeadSourceRecurringExpense|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error
     */
    public function updateLeadSourceRecurringExpenseUsingPATCH($lead_source_id, $lead_source_recurring_expense_id, $lead_source_recurring_expense_update_request, $update_mask = null, string $contentType = self::contentTypes['updateLeadSourceRecurringExpenseUsingPATCH'][0])
    {
        list($response) = $this->updateLeadSourceRecurringExpenseUsingPATCHWithHttpInfo($lead_source_id, $lead_source_recurring_expense_id, $lead_source_recurring_expense_update_request, $update_mask, $contentType);
        return $response;
    }

    /**
     * Operation updateLeadSourceRecurringExpenseUsingPATCHWithHttpInfo
     *
     * Update a Lead Source Recurring Expense
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  string $lead_source_recurring_expense_id The ID of a lead source recurring expense (required)
     * @param  \Keap\Core\V2\Model\LeadSourceRecurringExpenseUpdateRequest $lead_source_recurring_expense_update_request The request object to update a lead source recurring expense (required)
     * @param  string[]|null $update_mask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLeadSourceRecurringExpenseUsingPATCH'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\LeadSourceRecurringExpense|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLeadSourceRecurringExpenseUsingPATCHWithHttpInfo($lead_source_id, $lead_source_recurring_expense_id, $lead_source_recurring_expense_update_request, $update_mask = null, string $contentType = self::contentTypes['updateLeadSourceRecurringExpenseUsingPATCH'][0])
    {
        $request = $this->updateLeadSourceRecurringExpenseUsingPATCHRequest($lead_source_id, $lead_source_recurring_expense_id, $lead_source_recurring_expense_update_request, $update_mask, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\LeadSourceRecurringExpense',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\LeadSourceRecurringExpense',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\LeadSourceRecurringExpense',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateLeadSourceRecurringExpenseUsingPATCHAsync
     *
     * Update a Lead Source Recurring Expense
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  string $lead_source_recurring_expense_id The ID of a lead source recurring expense (required)
     * @param  \Keap\Core\V2\Model\LeadSourceRecurringExpenseUpdateRequest $lead_source_recurring_expense_update_request The request object to update a lead source recurring expense (required)
     * @param  string[]|null $update_mask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLeadSourceRecurringExpenseUsingPATCH'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLeadSourceRecurringExpenseUsingPATCHAsync($lead_source_id, $lead_source_recurring_expense_id, $lead_source_recurring_expense_update_request, $update_mask = null, string $contentType = self::contentTypes['updateLeadSourceRecurringExpenseUsingPATCH'][0])
    {
        return $this->updateLeadSourceRecurringExpenseUsingPATCHAsyncWithHttpInfo($lead_source_id, $lead_source_recurring_expense_id, $lead_source_recurring_expense_update_request, $update_mask, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLeadSourceRecurringExpenseUsingPATCHAsyncWithHttpInfo
     *
     * Update a Lead Source Recurring Expense
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  string $lead_source_recurring_expense_id The ID of a lead source recurring expense (required)
     * @param  \Keap\Core\V2\Model\LeadSourceRecurringExpenseUpdateRequest $lead_source_recurring_expense_update_request The request object to update a lead source recurring expense (required)
     * @param  string[]|null $update_mask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLeadSourceRecurringExpenseUsingPATCH'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLeadSourceRecurringExpenseUsingPATCHAsyncWithHttpInfo($lead_source_id, $lead_source_recurring_expense_id, $lead_source_recurring_expense_update_request, $update_mask = null, string $contentType = self::contentTypes['updateLeadSourceRecurringExpenseUsingPATCH'][0])
    {
        $returnType = '\Keap\Core\V2\Model\LeadSourceRecurringExpense';
        $request = $this->updateLeadSourceRecurringExpenseUsingPATCHRequest($lead_source_id, $lead_source_recurring_expense_id, $lead_source_recurring_expense_update_request, $update_mask, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLeadSourceRecurringExpenseUsingPATCH'
     *
     * @param  string $lead_source_id The ID of the lead source this recurring expense belongs to (required)
     * @param  string $lead_source_recurring_expense_id The ID of a lead source recurring expense (required)
     * @param  \Keap\Core\V2\Model\LeadSourceRecurringExpenseUpdateRequest $lead_source_recurring_expense_update_request The request object to update a lead source recurring expense (required)
     * @param  string[]|null $update_mask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLeadSourceRecurringExpenseUsingPATCH'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLeadSourceRecurringExpenseUsingPATCHRequest($lead_source_id, $lead_source_recurring_expense_id, $lead_source_recurring_expense_update_request, $update_mask = null, string $contentType = self::contentTypes['updateLeadSourceRecurringExpenseUsingPATCH'][0])
    {

        // verify the required parameter 'lead_source_id' is set
        if ($lead_source_id === null || (is_array($lead_source_id) && count($lead_source_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_source_id when calling updateLeadSourceRecurringExpenseUsingPATCH'
            );
        }

        // verify the required parameter 'lead_source_recurring_expense_id' is set
        if ($lead_source_recurring_expense_id === null || (is_array($lead_source_recurring_expense_id) && count($lead_source_recurring_expense_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_source_recurring_expense_id when calling updateLeadSourceRecurringExpenseUsingPATCH'
            );
        }

        // verify the required parameter 'lead_source_recurring_expense_update_request' is set
        if ($lead_source_recurring_expense_update_request === null || (is_array($lead_source_recurring_expense_update_request) && count($lead_source_recurring_expense_update_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lead_source_recurring_expense_update_request when calling updateLeadSourceRecurringExpenseUsingPATCH'
            );
        }



        $resourcePath = '/v2/leadSources/{lead_source_id}/recurringExpenses/{lead_source_recurring_expense_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $update_mask,
            'update_mask', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($lead_source_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lead_source_id' . '}',
                ObjectSerializer::toPathValue($lead_source_id),
                $resourcePath
            );
        }
        // path params
        if ($lead_source_recurring_expense_id !== null) {
            $resourcePath = str_replace(
                '{' . 'lead_source_recurring_expense_id' . '}',
                ObjectSerializer::toPathValue($lead_source_recurring_expense_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($lead_source_recurring_expense_update_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($lead_source_recurring_expense_update_request));
            } else {
                $httpBody = $lead_source_recurring_expense_update_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
