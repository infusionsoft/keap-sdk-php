<?php
/**
 * AffiliateApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Keap\Core\V2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.844065-hf-202508141354
 * Contact: api@keap.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Keap\Core\V2\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Keap\Core\V2\ApiException;
use Keap\Core\V2\Configuration;
use Keap\Core\V2\FormDataProcessor;
use Keap\Core\V2\HeaderSelector;
use Keap\Core\V2\ObjectSerializer;

/**
 * AffiliateApi Class Doc Comment
 *
 * @category Class
 * @package  Keap\Core\V2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AffiliateApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addAffiliate' => [
            'application/json',
        ],
        'addAffiliateToProgram' => [
            'application/json',
        ],
        'addCommissionProgram' => [
            'application/json',
        ],
        'assignProductCommissionProgram' => [
            'application/json',
        ],
        'assignSubscriptionCommissionProgram' => [
            'application/json',
        ],
        'createDefaultCommissionProgram' => [
            'application/json',
        ],
        'createRedirectLink' => [
            'application/json',
        ],
        'deleteAffiliate' => [
            'application/json',
        ],
        'deleteAffiliateCommissionProgram' => [
            'application/json',
        ],
        'deleteRedirectLink' => [
            'application/json',
        ],
        'getAffiliate' => [
            'application/json',
        ],
        'getAffiliateCommissionTotal' => [
            'application/json',
        ],
        'getAffiliateCommissions' => [
            'application/json',
        ],
        'getCommissionProgram' => [
            'application/json',
        ],
        'getRedirectLink' => [
            'application/json',
        ],
        'listAffiliateCommissionPrograms' => [
            'application/json',
        ],
        'listAffiliateLinks' => [
            'application/json',
        ],
        'listSummaries' => [
            'application/json',
        ],
        'removeAffiliateFromProgram' => [
            'application/json',
        ],
        'removeProductCommissionFromCommissions' => [
            'application/json',
        ],
        'removeSubscriptionPlanCommissionFromCommissions' => [
            'application/json',
        ],
        'updateAffiliate' => [
            'application/json',
        ],
        'updateCommissionProgram' => [
            'application/json',
        ],
        'updateDefaultCommissionProgram' => [
            'application/json',
        ],
        'updateProductCommissionProgram' => [
            'application/json',
        ],
        'updateRedirectLink' => [
            'application/json',
        ],
        'updateSubscriptionCommissionProgram' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addAffiliate
     *
     * Create an Affiliate
     *
     * @param  \Keap\Core\V2\Model\CreateAffiliateRequest|null $create_affiliate_request Affiliate request to insert (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAffiliate'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\RestAffiliate|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error
     */
    public function addAffiliate($create_affiliate_request = null, string $contentType = self::contentTypes['addAffiliate'][0])
    {
        list($response) = $this->addAffiliateWithHttpInfo($create_affiliate_request, $contentType);
        return $response;
    }

    /**
     * Operation addAffiliateWithHttpInfo
     *
     * Create an Affiliate
     *
     * @param  \Keap\Core\V2\Model\CreateAffiliateRequest|null $create_affiliate_request Affiliate request to insert (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAffiliate'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\RestAffiliate|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function addAffiliateWithHttpInfo($create_affiliate_request = null, string $contentType = self::contentTypes['addAffiliate'][0])
    {
        $request = $this->addAffiliateRequest($create_affiliate_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\RestAffiliate',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\RestAffiliate',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\RestAffiliate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addAffiliateAsync
     *
     * Create an Affiliate
     *
     * @param  \Keap\Core\V2\Model\CreateAffiliateRequest|null $create_affiliate_request Affiliate request to insert (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAffiliate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAffiliateAsync($create_affiliate_request = null, string $contentType = self::contentTypes['addAffiliate'][0])
    {
        return $this->addAffiliateAsyncWithHttpInfo($create_affiliate_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addAffiliateAsyncWithHttpInfo
     *
     * Create an Affiliate
     *
     * @param  \Keap\Core\V2\Model\CreateAffiliateRequest|null $create_affiliate_request Affiliate request to insert (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAffiliate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAffiliateAsyncWithHttpInfo($create_affiliate_request = null, string $contentType = self::contentTypes['addAffiliate'][0])
    {
        $returnType = '\Keap\Core\V2\Model\RestAffiliate';
        $request = $this->addAffiliateRequest($create_affiliate_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addAffiliate'
     *
     * @param  \Keap\Core\V2\Model\CreateAffiliateRequest|null $create_affiliate_request Affiliate request to insert (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAffiliate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addAffiliateRequest($create_affiliate_request = null, string $contentType = self::contentTypes['addAffiliate'][0])
    {



        $resourcePath = '/v2/affiliates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_affiliate_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_affiliate_request));
            } else {
                $httpBody = $create_affiliate_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addAffiliateToProgram
     *
     * Assign Affiliate to Commission program
     *
     * @param  string $id id (required)
     * @param  \Keap\Core\V2\Model\AffiliateAddToProgramRequest $affiliate_add_to_program_request affiliateAddToProgramRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAffiliateToProgram'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addAffiliateToProgram($id, $affiliate_add_to_program_request, string $contentType = self::contentTypes['addAffiliateToProgram'][0])
    {
        $this->addAffiliateToProgramWithHttpInfo($id, $affiliate_add_to_program_request, $contentType);
    }

    /**
     * Operation addAffiliateToProgramWithHttpInfo
     *
     * Assign Affiliate to Commission program
     *
     * @param  string $id id (required)
     * @param  \Keap\Core\V2\Model\AffiliateAddToProgramRequest $affiliate_add_to_program_request affiliateAddToProgramRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAffiliateToProgram'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addAffiliateToProgramWithHttpInfo($id, $affiliate_add_to_program_request, string $contentType = self::contentTypes['addAffiliateToProgram'][0])
    {
        $request = $this->addAffiliateToProgramRequest($id, $affiliate_add_to_program_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addAffiliateToProgramAsync
     *
     * Assign Affiliate to Commission program
     *
     * @param  string $id id (required)
     * @param  \Keap\Core\V2\Model\AffiliateAddToProgramRequest $affiliate_add_to_program_request affiliateAddToProgramRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAffiliateToProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAffiliateToProgramAsync($id, $affiliate_add_to_program_request, string $contentType = self::contentTypes['addAffiliateToProgram'][0])
    {
        return $this->addAffiliateToProgramAsyncWithHttpInfo($id, $affiliate_add_to_program_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addAffiliateToProgramAsyncWithHttpInfo
     *
     * Assign Affiliate to Commission program
     *
     * @param  string $id id (required)
     * @param  \Keap\Core\V2\Model\AffiliateAddToProgramRequest $affiliate_add_to_program_request affiliateAddToProgramRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAffiliateToProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAffiliateToProgramAsyncWithHttpInfo($id, $affiliate_add_to_program_request, string $contentType = self::contentTypes['addAffiliateToProgram'][0])
    {
        $returnType = '';
        $request = $this->addAffiliateToProgramRequest($id, $affiliate_add_to_program_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addAffiliateToProgram'
     *
     * @param  string $id id (required)
     * @param  \Keap\Core\V2\Model\AffiliateAddToProgramRequest $affiliate_add_to_program_request affiliateAddToProgramRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAffiliateToProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addAffiliateToProgramRequest($id, $affiliate_add_to_program_request, string $contentType = self::contentTypes['addAffiliateToProgram'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling addAffiliateToProgram'
            );
        }

        // verify the required parameter 'affiliate_add_to_program_request' is set
        if ($affiliate_add_to_program_request === null || (is_array($affiliate_add_to_program_request) && count($affiliate_add_to_program_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $affiliate_add_to_program_request when calling addAffiliateToProgram'
            );
        }


        $resourcePath = '/v2/affiliates/{id}:assignToProgram';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($affiliate_add_to_program_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($affiliate_add_to_program_request));
            } else {
                $httpBody = $affiliate_add_to_program_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addCommissionProgram
     *
     * Create an Affiliate Commission Program
     *
     * @param  \Keap\Core\V2\Model\CreateCommissionProgramRequest|null $create_commission_program_request Commission Program to insert (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCommissionProgram'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\AffiliateCommissionProgramResponse|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error
     */
    public function addCommissionProgram($create_commission_program_request = null, string $contentType = self::contentTypes['addCommissionProgram'][0])
    {
        list($response) = $this->addCommissionProgramWithHttpInfo($create_commission_program_request, $contentType);
        return $response;
    }

    /**
     * Operation addCommissionProgramWithHttpInfo
     *
     * Create an Affiliate Commission Program
     *
     * @param  \Keap\Core\V2\Model\CreateCommissionProgramRequest|null $create_commission_program_request Commission Program to insert (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCommissionProgram'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\AffiliateCommissionProgramResponse|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function addCommissionProgramWithHttpInfo($create_commission_program_request = null, string $contentType = self::contentTypes['addCommissionProgram'][0])
    {
        $request = $this->addCommissionProgramRequest($create_commission_program_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\AffiliateCommissionProgramResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\AffiliateCommissionProgramResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\AffiliateCommissionProgramResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addCommissionProgramAsync
     *
     * Create an Affiliate Commission Program
     *
     * @param  \Keap\Core\V2\Model\CreateCommissionProgramRequest|null $create_commission_program_request Commission Program to insert (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCommissionProgramAsync($create_commission_program_request = null, string $contentType = self::contentTypes['addCommissionProgram'][0])
    {
        return $this->addCommissionProgramAsyncWithHttpInfo($create_commission_program_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addCommissionProgramAsyncWithHttpInfo
     *
     * Create an Affiliate Commission Program
     *
     * @param  \Keap\Core\V2\Model\CreateCommissionProgramRequest|null $create_commission_program_request Commission Program to insert (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCommissionProgramAsyncWithHttpInfo($create_commission_program_request = null, string $contentType = self::contentTypes['addCommissionProgram'][0])
    {
        $returnType = '\Keap\Core\V2\Model\AffiliateCommissionProgramResponse';
        $request = $this->addCommissionProgramRequest($create_commission_program_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addCommissionProgram'
     *
     * @param  \Keap\Core\V2\Model\CreateCommissionProgramRequest|null $create_commission_program_request Commission Program to insert (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addCommissionProgramRequest($create_commission_program_request = null, string $contentType = self::contentTypes['addCommissionProgram'][0])
    {



        $resourcePath = '/v2/affiliates/commissionPrograms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_commission_program_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_commission_program_request));
            } else {
                $httpBody = $create_commission_program_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assignProductCommissionProgram
     *
     * Assign a Product Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Keap\Core\V2\Model\CreateProductCommissionProgramRequest|null $create_product_commission_program_request Product Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignProductCommissionProgram'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\ProductCommissionProgram|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error
     */
    public function assignProductCommissionProgram($commission_program_id, $create_product_commission_program_request = null, string $contentType = self::contentTypes['assignProductCommissionProgram'][0])
    {
        list($response) = $this->assignProductCommissionProgramWithHttpInfo($commission_program_id, $create_product_commission_program_request, $contentType);
        return $response;
    }

    /**
     * Operation assignProductCommissionProgramWithHttpInfo
     *
     * Assign a Product Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Keap\Core\V2\Model\CreateProductCommissionProgramRequest|null $create_product_commission_program_request Product Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignProductCommissionProgram'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\ProductCommissionProgram|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function assignProductCommissionProgramWithHttpInfo($commission_program_id, $create_product_commission_program_request = null, string $contentType = self::contentTypes['assignProductCommissionProgram'][0])
    {
        $request = $this->assignProductCommissionProgramRequest($commission_program_id, $create_product_commission_program_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\ProductCommissionProgram',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\ProductCommissionProgram',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\ProductCommissionProgram',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation assignProductCommissionProgramAsync
     *
     * Assign a Product Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Keap\Core\V2\Model\CreateProductCommissionProgramRequest|null $create_product_commission_program_request Product Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignProductCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignProductCommissionProgramAsync($commission_program_id, $create_product_commission_program_request = null, string $contentType = self::contentTypes['assignProductCommissionProgram'][0])
    {
        return $this->assignProductCommissionProgramAsyncWithHttpInfo($commission_program_id, $create_product_commission_program_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assignProductCommissionProgramAsyncWithHttpInfo
     *
     * Assign a Product Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Keap\Core\V2\Model\CreateProductCommissionProgramRequest|null $create_product_commission_program_request Product Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignProductCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignProductCommissionProgramAsyncWithHttpInfo($commission_program_id, $create_product_commission_program_request = null, string $contentType = self::contentTypes['assignProductCommissionProgram'][0])
    {
        $returnType = '\Keap\Core\V2\Model\ProductCommissionProgram';
        $request = $this->assignProductCommissionProgramRequest($commission_program_id, $create_product_commission_program_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assignProductCommissionProgram'
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Keap\Core\V2\Model\CreateProductCommissionProgramRequest|null $create_product_commission_program_request Product Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignProductCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assignProductCommissionProgramRequest($commission_program_id, $create_product_commission_program_request = null, string $contentType = self::contentTypes['assignProductCommissionProgram'][0])
    {

        // verify the required parameter 'commission_program_id' is set
        if ($commission_program_id === null || (is_array($commission_program_id) && count($commission_program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commission_program_id when calling assignProductCommissionProgram'
            );
        }



        $resourcePath = '/v2/affiliates/commissionPrograms/productCommissionPrograms/{commission_program_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($commission_program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commission_program_id' . '}',
                ObjectSerializer::toPathValue($commission_program_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_product_commission_program_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_product_commission_program_request));
            } else {
                $httpBody = $create_product_commission_program_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assignSubscriptionCommissionProgram
     *
     * Assign a Subscription Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Keap\Core\V2\Model\CreateSubscriptionCommissionProgramRequest|null $create_subscription_commission_program_request Subscription Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignSubscriptionCommissionProgram'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\SubscriptionCommissionProgram|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error
     */
    public function assignSubscriptionCommissionProgram($commission_program_id, $create_subscription_commission_program_request = null, string $contentType = self::contentTypes['assignSubscriptionCommissionProgram'][0])
    {
        list($response) = $this->assignSubscriptionCommissionProgramWithHttpInfo($commission_program_id, $create_subscription_commission_program_request, $contentType);
        return $response;
    }

    /**
     * Operation assignSubscriptionCommissionProgramWithHttpInfo
     *
     * Assign a Subscription Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Keap\Core\V2\Model\CreateSubscriptionCommissionProgramRequest|null $create_subscription_commission_program_request Subscription Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignSubscriptionCommissionProgram'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\SubscriptionCommissionProgram|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function assignSubscriptionCommissionProgramWithHttpInfo($commission_program_id, $create_subscription_commission_program_request = null, string $contentType = self::contentTypes['assignSubscriptionCommissionProgram'][0])
    {
        $request = $this->assignSubscriptionCommissionProgramRequest($commission_program_id, $create_subscription_commission_program_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\SubscriptionCommissionProgram',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\SubscriptionCommissionProgram',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\SubscriptionCommissionProgram',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation assignSubscriptionCommissionProgramAsync
     *
     * Assign a Subscription Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Keap\Core\V2\Model\CreateSubscriptionCommissionProgramRequest|null $create_subscription_commission_program_request Subscription Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignSubscriptionCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignSubscriptionCommissionProgramAsync($commission_program_id, $create_subscription_commission_program_request = null, string $contentType = self::contentTypes['assignSubscriptionCommissionProgram'][0])
    {
        return $this->assignSubscriptionCommissionProgramAsyncWithHttpInfo($commission_program_id, $create_subscription_commission_program_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assignSubscriptionCommissionProgramAsyncWithHttpInfo
     *
     * Assign a Subscription Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Keap\Core\V2\Model\CreateSubscriptionCommissionProgramRequest|null $create_subscription_commission_program_request Subscription Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignSubscriptionCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignSubscriptionCommissionProgramAsyncWithHttpInfo($commission_program_id, $create_subscription_commission_program_request = null, string $contentType = self::contentTypes['assignSubscriptionCommissionProgram'][0])
    {
        $returnType = '\Keap\Core\V2\Model\SubscriptionCommissionProgram';
        $request = $this->assignSubscriptionCommissionProgramRequest($commission_program_id, $create_subscription_commission_program_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assignSubscriptionCommissionProgram'
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Keap\Core\V2\Model\CreateSubscriptionCommissionProgramRequest|null $create_subscription_commission_program_request Subscription Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignSubscriptionCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assignSubscriptionCommissionProgramRequest($commission_program_id, $create_subscription_commission_program_request = null, string $contentType = self::contentTypes['assignSubscriptionCommissionProgram'][0])
    {

        // verify the required parameter 'commission_program_id' is set
        if ($commission_program_id === null || (is_array($commission_program_id) && count($commission_program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commission_program_id when calling assignSubscriptionCommissionProgram'
            );
        }



        $resourcePath = '/v2/affiliates/commissionPrograms/subscriptionCommissionPrograms/{commission_program_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($commission_program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commission_program_id' . '}',
                ObjectSerializer::toPathValue($commission_program_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_subscription_commission_program_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_subscription_commission_program_request));
            } else {
                $httpBody = $create_subscription_commission_program_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createDefaultCommissionProgram
     *
     * Create a Default Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Keap\Core\V2\Model\CreateDefaultCommissionProgramRequest|null $create_default_commission_program_request Values of the Default Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDefaultCommissionProgram'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\SetDefaultCommissionProgramResponse|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error
     */
    public function createDefaultCommissionProgram($commission_program_id, $create_default_commission_program_request = null, string $contentType = self::contentTypes['createDefaultCommissionProgram'][0])
    {
        list($response) = $this->createDefaultCommissionProgramWithHttpInfo($commission_program_id, $create_default_commission_program_request, $contentType);
        return $response;
    }

    /**
     * Operation createDefaultCommissionProgramWithHttpInfo
     *
     * Create a Default Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Keap\Core\V2\Model\CreateDefaultCommissionProgramRequest|null $create_default_commission_program_request Values of the Default Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDefaultCommissionProgram'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\SetDefaultCommissionProgramResponse|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDefaultCommissionProgramWithHttpInfo($commission_program_id, $create_default_commission_program_request = null, string $contentType = self::contentTypes['createDefaultCommissionProgram'][0])
    {
        $request = $this->createDefaultCommissionProgramRequest($commission_program_id, $create_default_commission_program_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\SetDefaultCommissionProgramResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\SetDefaultCommissionProgramResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\SetDefaultCommissionProgramResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createDefaultCommissionProgramAsync
     *
     * Create a Default Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Keap\Core\V2\Model\CreateDefaultCommissionProgramRequest|null $create_default_commission_program_request Values of the Default Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDefaultCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDefaultCommissionProgramAsync($commission_program_id, $create_default_commission_program_request = null, string $contentType = self::contentTypes['createDefaultCommissionProgram'][0])
    {
        return $this->createDefaultCommissionProgramAsyncWithHttpInfo($commission_program_id, $create_default_commission_program_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDefaultCommissionProgramAsyncWithHttpInfo
     *
     * Create a Default Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Keap\Core\V2\Model\CreateDefaultCommissionProgramRequest|null $create_default_commission_program_request Values of the Default Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDefaultCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDefaultCommissionProgramAsyncWithHttpInfo($commission_program_id, $create_default_commission_program_request = null, string $contentType = self::contentTypes['createDefaultCommissionProgram'][0])
    {
        $returnType = '\Keap\Core\V2\Model\SetDefaultCommissionProgramResponse';
        $request = $this->createDefaultCommissionProgramRequest($commission_program_id, $create_default_commission_program_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDefaultCommissionProgram'
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Keap\Core\V2\Model\CreateDefaultCommissionProgramRequest|null $create_default_commission_program_request Values of the Default Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDefaultCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDefaultCommissionProgramRequest($commission_program_id, $create_default_commission_program_request = null, string $contentType = self::contentTypes['createDefaultCommissionProgram'][0])
    {

        // verify the required parameter 'commission_program_id' is set
        if ($commission_program_id === null || (is_array($commission_program_id) && count($commission_program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commission_program_id when calling createDefaultCommissionProgram'
            );
        }



        $resourcePath = '/v2/affiliates/commissionPrograms/defaultCommissionPrograms/{commission_program_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($commission_program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commission_program_id' . '}',
                ObjectSerializer::toPathValue($commission_program_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_default_commission_program_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_default_commission_program_request));
            } else {
                $httpBody = $create_default_commission_program_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createRedirectLink
     *
     * Create an Affiliate Link
     *
     * @param  \Keap\Core\V2\Model\CreateOrUpdateAffiliateLinkRequest $create_or_update_affiliate_link_request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRedirectLink'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\AffiliateLink|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error
     */
    public function createRedirectLink($create_or_update_affiliate_link_request, string $contentType = self::contentTypes['createRedirectLink'][0])
    {
        list($response) = $this->createRedirectLinkWithHttpInfo($create_or_update_affiliate_link_request, $contentType);
        return $response;
    }

    /**
     * Operation createRedirectLinkWithHttpInfo
     *
     * Create an Affiliate Link
     *
     * @param  \Keap\Core\V2\Model\CreateOrUpdateAffiliateLinkRequest $create_or_update_affiliate_link_request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRedirectLink'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\AffiliateLink|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRedirectLinkWithHttpInfo($create_or_update_affiliate_link_request, string $contentType = self::contentTypes['createRedirectLink'][0])
    {
        $request = $this->createRedirectLinkRequest($create_or_update_affiliate_link_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\AffiliateLink',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\AffiliateLink',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\AffiliateLink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createRedirectLinkAsync
     *
     * Create an Affiliate Link
     *
     * @param  \Keap\Core\V2\Model\CreateOrUpdateAffiliateLinkRequest $create_or_update_affiliate_link_request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRedirectLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRedirectLinkAsync($create_or_update_affiliate_link_request, string $contentType = self::contentTypes['createRedirectLink'][0])
    {
        return $this->createRedirectLinkAsyncWithHttpInfo($create_or_update_affiliate_link_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createRedirectLinkAsyncWithHttpInfo
     *
     * Create an Affiliate Link
     *
     * @param  \Keap\Core\V2\Model\CreateOrUpdateAffiliateLinkRequest $create_or_update_affiliate_link_request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRedirectLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRedirectLinkAsyncWithHttpInfo($create_or_update_affiliate_link_request, string $contentType = self::contentTypes['createRedirectLink'][0])
    {
        $returnType = '\Keap\Core\V2\Model\AffiliateLink';
        $request = $this->createRedirectLinkRequest($create_or_update_affiliate_link_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRedirectLink'
     *
     * @param  \Keap\Core\V2\Model\CreateOrUpdateAffiliateLinkRequest $create_or_update_affiliate_link_request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRedirectLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createRedirectLinkRequest($create_or_update_affiliate_link_request, string $contentType = self::contentTypes['createRedirectLink'][0])
    {

        // verify the required parameter 'create_or_update_affiliate_link_request' is set
        if ($create_or_update_affiliate_link_request === null || (is_array($create_or_update_affiliate_link_request) && count($create_or_update_affiliate_link_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_or_update_affiliate_link_request when calling createRedirectLink'
            );
        }


        $resourcePath = '/v2/affiliates/redirects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_or_update_affiliate_link_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_or_update_affiliate_link_request));
            } else {
                $httpBody = $create_or_update_affiliate_link_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAffiliate
     *
     * Delete Affiliate
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAffiliate'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAffiliate($id, string $contentType = self::contentTypes['deleteAffiliate'][0])
    {
        $this->deleteAffiliateWithHttpInfo($id, $contentType);
    }

    /**
     * Operation deleteAffiliateWithHttpInfo
     *
     * Delete Affiliate
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAffiliate'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAffiliateWithHttpInfo($id, string $contentType = self::contentTypes['deleteAffiliate'][0])
    {
        $request = $this->deleteAffiliateRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteAffiliateAsync
     *
     * Delete Affiliate
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAffiliate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAffiliateAsync($id, string $contentType = self::contentTypes['deleteAffiliate'][0])
    {
        return $this->deleteAffiliateAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAffiliateAsyncWithHttpInfo
     *
     * Delete Affiliate
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAffiliate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAffiliateAsyncWithHttpInfo($id, string $contentType = self::contentTypes['deleteAffiliate'][0])
    {
        $returnType = '';
        $request = $this->deleteAffiliateRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAffiliate'
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAffiliate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAffiliateRequest($id, string $contentType = self::contentTypes['deleteAffiliate'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteAffiliate'
            );
        }


        $resourcePath = '/v2/affiliates/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAffiliateCommissionProgram
     *
     * Delete a Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAffiliateCommissionProgram'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAffiliateCommissionProgram($commission_program_id, string $contentType = self::contentTypes['deleteAffiliateCommissionProgram'][0])
    {
        $this->deleteAffiliateCommissionProgramWithHttpInfo($commission_program_id, $contentType);
    }

    /**
     * Operation deleteAffiliateCommissionProgramWithHttpInfo
     *
     * Delete a Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAffiliateCommissionProgram'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAffiliateCommissionProgramWithHttpInfo($commission_program_id, string $contentType = self::contentTypes['deleteAffiliateCommissionProgram'][0])
    {
        $request = $this->deleteAffiliateCommissionProgramRequest($commission_program_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteAffiliateCommissionProgramAsync
     *
     * Delete a Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAffiliateCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAffiliateCommissionProgramAsync($commission_program_id, string $contentType = self::contentTypes['deleteAffiliateCommissionProgram'][0])
    {
        return $this->deleteAffiliateCommissionProgramAsyncWithHttpInfo($commission_program_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAffiliateCommissionProgramAsyncWithHttpInfo
     *
     * Delete a Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAffiliateCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAffiliateCommissionProgramAsyncWithHttpInfo($commission_program_id, string $contentType = self::contentTypes['deleteAffiliateCommissionProgram'][0])
    {
        $returnType = '';
        $request = $this->deleteAffiliateCommissionProgramRequest($commission_program_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAffiliateCommissionProgram'
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAffiliateCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAffiliateCommissionProgramRequest($commission_program_id, string $contentType = self::contentTypes['deleteAffiliateCommissionProgram'][0])
    {

        // verify the required parameter 'commission_program_id' is set
        if ($commission_program_id === null || (is_array($commission_program_id) && count($commission_program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commission_program_id when calling deleteAffiliateCommissionProgram'
            );
        }


        $resourcePath = '/v2/affiliates/commissionPrograms/{commission_program_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($commission_program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commission_program_id' . '}',
                ObjectSerializer::toPathValue($commission_program_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRedirectLink
     *
     * Delete an Affiliate Link
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRedirectLink'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteRedirectLink($redirect_id, string $contentType = self::contentTypes['deleteRedirectLink'][0])
    {
        $this->deleteRedirectLinkWithHttpInfo($redirect_id, $contentType);
    }

    /**
     * Operation deleteRedirectLinkWithHttpInfo
     *
     * Delete an Affiliate Link
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRedirectLink'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRedirectLinkWithHttpInfo($redirect_id, string $contentType = self::contentTypes['deleteRedirectLink'][0])
    {
        $request = $this->deleteRedirectLinkRequest($redirect_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteRedirectLinkAsync
     *
     * Delete an Affiliate Link
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRedirectLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRedirectLinkAsync($redirect_id, string $contentType = self::contentTypes['deleteRedirectLink'][0])
    {
        return $this->deleteRedirectLinkAsyncWithHttpInfo($redirect_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRedirectLinkAsyncWithHttpInfo
     *
     * Delete an Affiliate Link
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRedirectLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRedirectLinkAsyncWithHttpInfo($redirect_id, string $contentType = self::contentTypes['deleteRedirectLink'][0])
    {
        $returnType = '';
        $request = $this->deleteRedirectLinkRequest($redirect_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRedirectLink'
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRedirectLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRedirectLinkRequest($redirect_id, string $contentType = self::contentTypes['deleteRedirectLink'][0])
    {

        // verify the required parameter 'redirect_id' is set
        if ($redirect_id === null || (is_array($redirect_id) && count($redirect_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $redirect_id when calling deleteRedirectLink'
            );
        }


        $resourcePath = '/v2/affiliates/redirects/{redirect_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($redirect_id !== null) {
            $resourcePath = str_replace(
                '{' . 'redirect_id' . '}',
                ObjectSerializer::toPathValue($redirect_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAffiliate
     *
     * Retrieve an Affiliate
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliate'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\RestAffiliate|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error
     */
    public function getAffiliate($id, string $contentType = self::contentTypes['getAffiliate'][0])
    {
        list($response) = $this->getAffiliateWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getAffiliateWithHttpInfo
     *
     * Retrieve an Affiliate
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliate'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\RestAffiliate|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAffiliateWithHttpInfo($id, string $contentType = self::contentTypes['getAffiliate'][0])
    {
        $request = $this->getAffiliateRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\RestAffiliate',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\RestAffiliate',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\RestAffiliate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getAffiliateAsync
     *
     * Retrieve an Affiliate
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAffiliateAsync($id, string $contentType = self::contentTypes['getAffiliate'][0])
    {
        return $this->getAffiliateAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAffiliateAsyncWithHttpInfo
     *
     * Retrieve an Affiliate
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAffiliateAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getAffiliate'][0])
    {
        $returnType = '\Keap\Core\V2\Model\RestAffiliate';
        $request = $this->getAffiliateRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAffiliate'
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAffiliateRequest($id, string $contentType = self::contentTypes['getAffiliate'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getAffiliate'
            );
        }


        $resourcePath = '/v2/affiliates/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAffiliateCommissionTotal
     *
     * Retrieve Affiliate Commission Earned and View LedgerURl for portal
     *
     * @param  string $affiliate_id affiliate_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateCommissionTotal'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\AffiliateCommissionEarned|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error
     */
    public function getAffiliateCommissionTotal($affiliate_id, string $contentType = self::contentTypes['getAffiliateCommissionTotal'][0])
    {
        list($response) = $this->getAffiliateCommissionTotalWithHttpInfo($affiliate_id, $contentType);
        return $response;
    }

    /**
     * Operation getAffiliateCommissionTotalWithHttpInfo
     *
     * Retrieve Affiliate Commission Earned and View LedgerURl for portal
     *
     * @param  string $affiliate_id affiliate_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateCommissionTotal'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\AffiliateCommissionEarned|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAffiliateCommissionTotalWithHttpInfo($affiliate_id, string $contentType = self::contentTypes['getAffiliateCommissionTotal'][0])
    {
        $request = $this->getAffiliateCommissionTotalRequest($affiliate_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\AffiliateCommissionEarned',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\AffiliateCommissionEarned',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\AffiliateCommissionEarned',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getAffiliateCommissionTotalAsync
     *
     * Retrieve Affiliate Commission Earned and View LedgerURl for portal
     *
     * @param  string $affiliate_id affiliate_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateCommissionTotal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAffiliateCommissionTotalAsync($affiliate_id, string $contentType = self::contentTypes['getAffiliateCommissionTotal'][0])
    {
        return $this->getAffiliateCommissionTotalAsyncWithHttpInfo($affiliate_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAffiliateCommissionTotalAsyncWithHttpInfo
     *
     * Retrieve Affiliate Commission Earned and View LedgerURl for portal
     *
     * @param  string $affiliate_id affiliate_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateCommissionTotal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAffiliateCommissionTotalAsyncWithHttpInfo($affiliate_id, string $contentType = self::contentTypes['getAffiliateCommissionTotal'][0])
    {
        $returnType = '\Keap\Core\V2\Model\AffiliateCommissionEarned';
        $request = $this->getAffiliateCommissionTotalRequest($affiliate_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAffiliateCommissionTotal'
     *
     * @param  string $affiliate_id affiliate_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateCommissionTotal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAffiliateCommissionTotalRequest($affiliate_id, string $contentType = self::contentTypes['getAffiliateCommissionTotal'][0])
    {

        // verify the required parameter 'affiliate_id' is set
        if ($affiliate_id === null || (is_array($affiliate_id) && count($affiliate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $affiliate_id when calling getAffiliateCommissionTotal'
            );
        }


        $resourcePath = '/v2/affiliates/{affiliate_id}/commissionTotal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($affiliate_id !== null) {
            $resourcePath = str_replace(
                '{' . 'affiliate_id' . '}',
                ObjectSerializer::toPathValue($affiliate_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAffiliateCommissions
     *
     * Retrieve Affiliate Commission and Clawbacks
     *
     * @param  string $affiliate_id affiliate_id (required)
     * @param  string|null $filter Filter to apply, allowed fields are: - (String) &#x60;affiliateId&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliateId%3D%3D123&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields: - &#x60;invoice_id&#x60; - &#x60;affowed_id&#x60; - &#x60;date_earned&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateCommissions'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\ListAffiliateCommissionsResponse|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error
     */
    public function getAffiliateCommissions($affiliate_id, $filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['getAffiliateCommissions'][0])
    {
        list($response) = $this->getAffiliateCommissionsWithHttpInfo($affiliate_id, $filter, $order_by, $page_size, $page_token, $contentType);
        return $response;
    }

    /**
     * Operation getAffiliateCommissionsWithHttpInfo
     *
     * Retrieve Affiliate Commission and Clawbacks
     *
     * @param  string $affiliate_id affiliate_id (required)
     * @param  string|null $filter Filter to apply, allowed fields are: - (String) &#x60;affiliateId&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliateId%3D%3D123&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields: - &#x60;invoice_id&#x60; - &#x60;affowed_id&#x60; - &#x60;date_earned&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateCommissions'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\ListAffiliateCommissionsResponse|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAffiliateCommissionsWithHttpInfo($affiliate_id, $filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['getAffiliateCommissions'][0])
    {
        $request = $this->getAffiliateCommissionsRequest($affiliate_id, $filter, $order_by, $page_size, $page_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\ListAffiliateCommissionsResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\ListAffiliateCommissionsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\ListAffiliateCommissionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getAffiliateCommissionsAsync
     *
     * Retrieve Affiliate Commission and Clawbacks
     *
     * @param  string $affiliate_id affiliate_id (required)
     * @param  string|null $filter Filter to apply, allowed fields are: - (String) &#x60;affiliateId&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliateId%3D%3D123&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields: - &#x60;invoice_id&#x60; - &#x60;affowed_id&#x60; - &#x60;date_earned&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateCommissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAffiliateCommissionsAsync($affiliate_id, $filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['getAffiliateCommissions'][0])
    {
        return $this->getAffiliateCommissionsAsyncWithHttpInfo($affiliate_id, $filter, $order_by, $page_size, $page_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAffiliateCommissionsAsyncWithHttpInfo
     *
     * Retrieve Affiliate Commission and Clawbacks
     *
     * @param  string $affiliate_id affiliate_id (required)
     * @param  string|null $filter Filter to apply, allowed fields are: - (String) &#x60;affiliateId&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliateId%3D%3D123&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields: - &#x60;invoice_id&#x60; - &#x60;affowed_id&#x60; - &#x60;date_earned&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateCommissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAffiliateCommissionsAsyncWithHttpInfo($affiliate_id, $filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['getAffiliateCommissions'][0])
    {
        $returnType = '\Keap\Core\V2\Model\ListAffiliateCommissionsResponse';
        $request = $this->getAffiliateCommissionsRequest($affiliate_id, $filter, $order_by, $page_size, $page_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAffiliateCommissions'
     *
     * @param  string $affiliate_id affiliate_id (required)
     * @param  string|null $filter Filter to apply, allowed fields are: - (String) &#x60;affiliateId&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliateId%3D%3D123&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields: - &#x60;invoice_id&#x60; - &#x60;affowed_id&#x60; - &#x60;date_earned&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateCommissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAffiliateCommissionsRequest($affiliate_id, $filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['getAffiliateCommissions'][0])
    {

        // verify the required parameter 'affiliate_id' is set
        if ($affiliate_id === null || (is_array($affiliate_id) && count($affiliate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $affiliate_id when calling getAffiliateCommissions'
            );
        }



        if ($page_size !== null && $page_size > 1000) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling AffiliateApi.getAffiliateCommissions, must be smaller than or equal to 1000.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling AffiliateApi.getAffiliateCommissions, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v2/affiliates/{affiliate_id}:commissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'order_by', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_token,
            'page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($affiliate_id !== null) {
            $resourcePath = str_replace(
                '{' . 'affiliate_id' . '}',
                ObjectSerializer::toPathValue($affiliate_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCommissionProgram
     *
     * Retrieve a Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommissionProgram'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\AffiliateProgramV2|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error
     */
    public function getCommissionProgram($commission_program_id, string $contentType = self::contentTypes['getCommissionProgram'][0])
    {
        list($response) = $this->getCommissionProgramWithHttpInfo($commission_program_id, $contentType);
        return $response;
    }

    /**
     * Operation getCommissionProgramWithHttpInfo
     *
     * Retrieve a Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommissionProgram'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\AffiliateProgramV2|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCommissionProgramWithHttpInfo($commission_program_id, string $contentType = self::contentTypes['getCommissionProgram'][0])
    {
        $request = $this->getCommissionProgramRequest($commission_program_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\AffiliateProgramV2',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\AffiliateProgramV2',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\AffiliateProgramV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCommissionProgramAsync
     *
     * Retrieve a Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommissionProgramAsync($commission_program_id, string $contentType = self::contentTypes['getCommissionProgram'][0])
    {
        return $this->getCommissionProgramAsyncWithHttpInfo($commission_program_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCommissionProgramAsyncWithHttpInfo
     *
     * Retrieve a Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommissionProgramAsyncWithHttpInfo($commission_program_id, string $contentType = self::contentTypes['getCommissionProgram'][0])
    {
        $returnType = '\Keap\Core\V2\Model\AffiliateProgramV2';
        $request = $this->getCommissionProgramRequest($commission_program_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCommissionProgram'
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCommissionProgramRequest($commission_program_id, string $contentType = self::contentTypes['getCommissionProgram'][0])
    {

        // verify the required parameter 'commission_program_id' is set
        if ($commission_program_id === null || (is_array($commission_program_id) && count($commission_program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commission_program_id when calling getCommissionProgram'
            );
        }


        $resourcePath = '/v2/affiliates/commissionPrograms/{commission_program_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($commission_program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commission_program_id' . '}',
                ObjectSerializer::toPathValue($commission_program_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRedirectLink
     *
     * Retrieve an Affiliate Link
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRedirectLink'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\AffiliateLink|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error
     */
    public function getRedirectLink($redirect_id, string $contentType = self::contentTypes['getRedirectLink'][0])
    {
        list($response) = $this->getRedirectLinkWithHttpInfo($redirect_id, $contentType);
        return $response;
    }

    /**
     * Operation getRedirectLinkWithHttpInfo
     *
     * Retrieve an Affiliate Link
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRedirectLink'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\AffiliateLink|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRedirectLinkWithHttpInfo($redirect_id, string $contentType = self::contentTypes['getRedirectLink'][0])
    {
        $request = $this->getRedirectLinkRequest($redirect_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\AffiliateLink',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\AffiliateLink',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\AffiliateLink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getRedirectLinkAsync
     *
     * Retrieve an Affiliate Link
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRedirectLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRedirectLinkAsync($redirect_id, string $contentType = self::contentTypes['getRedirectLink'][0])
    {
        return $this->getRedirectLinkAsyncWithHttpInfo($redirect_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRedirectLinkAsyncWithHttpInfo
     *
     * Retrieve an Affiliate Link
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRedirectLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRedirectLinkAsyncWithHttpInfo($redirect_id, string $contentType = self::contentTypes['getRedirectLink'][0])
    {
        $returnType = '\Keap\Core\V2\Model\AffiliateLink';
        $request = $this->getRedirectLinkRequest($redirect_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRedirectLink'
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRedirectLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRedirectLinkRequest($redirect_id, string $contentType = self::contentTypes['getRedirectLink'][0])
    {

        // verify the required parameter 'redirect_id' is set
        if ($redirect_id === null || (is_array($redirect_id) && count($redirect_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $redirect_id when calling getRedirectLink'
            );
        }


        $resourcePath = '/v2/affiliates/redirects/{redirect_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($redirect_id !== null) {
            $resourcePath = str_replace(
                '{' . 'redirect_id' . '}',
                ObjectSerializer::toPathValue($redirect_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAffiliateCommissionPrograms
     *
     * List Affiliate Commission Programs
     *
     * @param  string|null $filter Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAffiliateCommissionPrograms'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\ListAffiliateCommissionProgramsResponse|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error
     */
    public function listAffiliateCommissionPrograms($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listAffiliateCommissionPrograms'][0])
    {
        list($response) = $this->listAffiliateCommissionProgramsWithHttpInfo($filter, $order_by, $page_size, $page_token, $contentType);
        return $response;
    }

    /**
     * Operation listAffiliateCommissionProgramsWithHttpInfo
     *
     * List Affiliate Commission Programs
     *
     * @param  string|null $filter Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAffiliateCommissionPrograms'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\ListAffiliateCommissionProgramsResponse|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAffiliateCommissionProgramsWithHttpInfo($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listAffiliateCommissionPrograms'][0])
    {
        $request = $this->listAffiliateCommissionProgramsRequest($filter, $order_by, $page_size, $page_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\ListAffiliateCommissionProgramsResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\ListAffiliateCommissionProgramsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\ListAffiliateCommissionProgramsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listAffiliateCommissionProgramsAsync
     *
     * List Affiliate Commission Programs
     *
     * @param  string|null $filter Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAffiliateCommissionPrograms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAffiliateCommissionProgramsAsync($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listAffiliateCommissionPrograms'][0])
    {
        return $this->listAffiliateCommissionProgramsAsyncWithHttpInfo($filter, $order_by, $page_size, $page_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAffiliateCommissionProgramsAsyncWithHttpInfo
     *
     * List Affiliate Commission Programs
     *
     * @param  string|null $filter Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAffiliateCommissionPrograms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAffiliateCommissionProgramsAsyncWithHttpInfo($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listAffiliateCommissionPrograms'][0])
    {
        $returnType = '\Keap\Core\V2\Model\ListAffiliateCommissionProgramsResponse';
        $request = $this->listAffiliateCommissionProgramsRequest($filter, $order_by, $page_size, $page_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAffiliateCommissionPrograms'
     *
     * @param  string|null $filter Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAffiliateCommissionPrograms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listAffiliateCommissionProgramsRequest($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listAffiliateCommissionPrograms'][0])
    {



        if ($page_size !== null && $page_size > 1000) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling AffiliateApi.listAffiliateCommissionPrograms, must be smaller than or equal to 1000.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling AffiliateApi.listAffiliateCommissionPrograms, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v2/affiliates/commissionPrograms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'order_by', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_token,
            'page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAffiliateLinks
     *
     * List Affiliate Links
     *
     * @param  string|null $filter Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAffiliateLinks'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\ListAffiliateLinksResponse|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error
     */
    public function listAffiliateLinks($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listAffiliateLinks'][0])
    {
        list($response) = $this->listAffiliateLinksWithHttpInfo($filter, $order_by, $page_size, $page_token, $contentType);
        return $response;
    }

    /**
     * Operation listAffiliateLinksWithHttpInfo
     *
     * List Affiliate Links
     *
     * @param  string|null $filter Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAffiliateLinks'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\ListAffiliateLinksResponse|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAffiliateLinksWithHttpInfo($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listAffiliateLinks'][0])
    {
        $request = $this->listAffiliateLinksRequest($filter, $order_by, $page_size, $page_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\ListAffiliateLinksResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\ListAffiliateLinksResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\ListAffiliateLinksResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listAffiliateLinksAsync
     *
     * List Affiliate Links
     *
     * @param  string|null $filter Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAffiliateLinks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAffiliateLinksAsync($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listAffiliateLinks'][0])
    {
        return $this->listAffiliateLinksAsyncWithHttpInfo($filter, $order_by, $page_size, $page_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAffiliateLinksAsyncWithHttpInfo
     *
     * List Affiliate Links
     *
     * @param  string|null $filter Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAffiliateLinks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAffiliateLinksAsyncWithHttpInfo($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listAffiliateLinks'][0])
    {
        $returnType = '\Keap\Core\V2\Model\ListAffiliateLinksResponse';
        $request = $this->listAffiliateLinksRequest($filter, $order_by, $page_size, $page_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAffiliateLinks'
     *
     * @param  string|null $filter Filter to apply, allowed fields are: - (String) &#x60;name&#x60; - (String) &#x60;affiliate_id&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;date_created&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAffiliateLinks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listAffiliateLinksRequest($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listAffiliateLinks'][0])
    {



        if ($page_size !== null && $page_size > 1000) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling AffiliateApi.listAffiliateLinks, must be smaller than or equal to 1000.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling AffiliateApi.listAffiliateLinks, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v2/affiliates/redirects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'order_by', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_token,
            'page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSummaries
     *
     * List Affiliate Summaries
     *
     * @param  string|null $filter Filter to apply, allowed fields are: - (List[String]) &#x60;affiliate_ids&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields: - &#x60;affiliate_id&#x60; - &#x60;amount_earned&#x60; - &#x60;balance&#x60; - &#x60;clawbacks&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSummaries'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\ListAffiliateSummariesResponse|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error
     */
    public function listSummaries($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listSummaries'][0])
    {
        list($response) = $this->listSummariesWithHttpInfo($filter, $order_by, $page_size, $page_token, $contentType);
        return $response;
    }

    /**
     * Operation listSummariesWithHttpInfo
     *
     * List Affiliate Summaries
     *
     * @param  string|null $filter Filter to apply, allowed fields are: - (List[String]) &#x60;affiliate_ids&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields: - &#x60;affiliate_id&#x60; - &#x60;amount_earned&#x60; - &#x60;balance&#x60; - &#x60;clawbacks&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSummaries'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\ListAffiliateSummariesResponse|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSummariesWithHttpInfo($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listSummaries'][0])
    {
        $request = $this->listSummariesRequest($filter, $order_by, $page_size, $page_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\ListAffiliateSummariesResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\ListAffiliateSummariesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\ListAffiliateSummariesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listSummariesAsync
     *
     * List Affiliate Summaries
     *
     * @param  string|null $filter Filter to apply, allowed fields are: - (List[String]) &#x60;affiliate_ids&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields: - &#x60;affiliate_id&#x60; - &#x60;amount_earned&#x60; - &#x60;balance&#x60; - &#x60;clawbacks&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSummaries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSummariesAsync($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listSummaries'][0])
    {
        return $this->listSummariesAsyncWithHttpInfo($filter, $order_by, $page_size, $page_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSummariesAsyncWithHttpInfo
     *
     * List Affiliate Summaries
     *
     * @param  string|null $filter Filter to apply, allowed fields are: - (List[String]) &#x60;affiliate_ids&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields: - &#x60;affiliate_id&#x60; - &#x60;amount_earned&#x60; - &#x60;balance&#x60; - &#x60;clawbacks&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSummaries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSummariesAsyncWithHttpInfo($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listSummaries'][0])
    {
        $returnType = '\Keap\Core\V2\Model\ListAffiliateSummariesResponse';
        $request = $this->listSummariesRequest($filter, $order_by, $page_size, $page_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSummaries'
     *
     * @param  string|null $filter Filter to apply, allowed fields are: - (List[String]) &#x60;affiliate_ids&#x60; - (String) &#x60;since_time&#x60; - (String) &#x60;until_time&#x60; You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60; (optional)
     * @param  string|null $order_by Attribute and direction to order items. One of the following fields: - &#x60;affiliate_id&#x60; - &#x60;amount_earned&#x60; - &#x60;balance&#x60; - &#x60;clawbacks&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)
     * @param  int|null $page_size Total number of items to return per page (optional)
     * @param  string|null $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSummaries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listSummariesRequest($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listSummaries'][0])
    {



        if ($page_size !== null && $page_size > 1000) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling AffiliateApi.listSummaries, must be smaller than or equal to 1000.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling AffiliateApi.listSummaries, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v2/affiliates/summaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'order_by', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_token,
            'page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeAffiliateFromProgram
     *
     * Remove an Affiliate from a Commission Program
     *
     * @param  string $id id (required)
     * @param  \Keap\Core\V2\Model\AffiliateRemoveFromProgramRequest $affiliate_remove_from_program_request removeFromProgramRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeAffiliateFromProgram'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeAffiliateFromProgram($id, $affiliate_remove_from_program_request, string $contentType = self::contentTypes['removeAffiliateFromProgram'][0])
    {
        $this->removeAffiliateFromProgramWithHttpInfo($id, $affiliate_remove_from_program_request, $contentType);
    }

    /**
     * Operation removeAffiliateFromProgramWithHttpInfo
     *
     * Remove an Affiliate from a Commission Program
     *
     * @param  string $id id (required)
     * @param  \Keap\Core\V2\Model\AffiliateRemoveFromProgramRequest $affiliate_remove_from_program_request removeFromProgramRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeAffiliateFromProgram'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeAffiliateFromProgramWithHttpInfo($id, $affiliate_remove_from_program_request, string $contentType = self::contentTypes['removeAffiliateFromProgram'][0])
    {
        $request = $this->removeAffiliateFromProgramRequest($id, $affiliate_remove_from_program_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation removeAffiliateFromProgramAsync
     *
     * Remove an Affiliate from a Commission Program
     *
     * @param  string $id id (required)
     * @param  \Keap\Core\V2\Model\AffiliateRemoveFromProgramRequest $affiliate_remove_from_program_request removeFromProgramRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeAffiliateFromProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeAffiliateFromProgramAsync($id, $affiliate_remove_from_program_request, string $contentType = self::contentTypes['removeAffiliateFromProgram'][0])
    {
        return $this->removeAffiliateFromProgramAsyncWithHttpInfo($id, $affiliate_remove_from_program_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeAffiliateFromProgramAsyncWithHttpInfo
     *
     * Remove an Affiliate from a Commission Program
     *
     * @param  string $id id (required)
     * @param  \Keap\Core\V2\Model\AffiliateRemoveFromProgramRequest $affiliate_remove_from_program_request removeFromProgramRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeAffiliateFromProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeAffiliateFromProgramAsyncWithHttpInfo($id, $affiliate_remove_from_program_request, string $contentType = self::contentTypes['removeAffiliateFromProgram'][0])
    {
        $returnType = '';
        $request = $this->removeAffiliateFromProgramRequest($id, $affiliate_remove_from_program_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeAffiliateFromProgram'
     *
     * @param  string $id id (required)
     * @param  \Keap\Core\V2\Model\AffiliateRemoveFromProgramRequest $affiliate_remove_from_program_request removeFromProgramRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeAffiliateFromProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeAffiliateFromProgramRequest($id, $affiliate_remove_from_program_request, string $contentType = self::contentTypes['removeAffiliateFromProgram'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling removeAffiliateFromProgram'
            );
        }

        // verify the required parameter 'affiliate_remove_from_program_request' is set
        if ($affiliate_remove_from_program_request === null || (is_array($affiliate_remove_from_program_request) && count($affiliate_remove_from_program_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $affiliate_remove_from_program_request when calling removeAffiliateFromProgram'
            );
        }


        $resourcePath = '/v2/affiliates/{id}:removeFromProgram';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($affiliate_remove_from_program_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($affiliate_remove_from_program_request));
            } else {
                $httpBody = $affiliate_remove_from_program_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeProductCommissionFromCommissions
     *
     * Remove a Product from a Commission Program
     *
     * @param  string $commission_id commission_id (required)
     * @param  \Keap\Core\V2\Model\DeleteProgramCommissionRequest $delete_program_commission_request deleteProgramCommissionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeProductCommissionFromCommissions'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeProductCommissionFromCommissions($commission_id, $delete_program_commission_request, string $contentType = self::contentTypes['removeProductCommissionFromCommissions'][0])
    {
        $this->removeProductCommissionFromCommissionsWithHttpInfo($commission_id, $delete_program_commission_request, $contentType);
    }

    /**
     * Operation removeProductCommissionFromCommissionsWithHttpInfo
     *
     * Remove a Product from a Commission Program
     *
     * @param  string $commission_id commission_id (required)
     * @param  \Keap\Core\V2\Model\DeleteProgramCommissionRequest $delete_program_commission_request deleteProgramCommissionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeProductCommissionFromCommissions'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeProductCommissionFromCommissionsWithHttpInfo($commission_id, $delete_program_commission_request, string $contentType = self::contentTypes['removeProductCommissionFromCommissions'][0])
    {
        $request = $this->removeProductCommissionFromCommissionsRequest($commission_id, $delete_program_commission_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation removeProductCommissionFromCommissionsAsync
     *
     * Remove a Product from a Commission Program
     *
     * @param  string $commission_id commission_id (required)
     * @param  \Keap\Core\V2\Model\DeleteProgramCommissionRequest $delete_program_commission_request deleteProgramCommissionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeProductCommissionFromCommissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeProductCommissionFromCommissionsAsync($commission_id, $delete_program_commission_request, string $contentType = self::contentTypes['removeProductCommissionFromCommissions'][0])
    {
        return $this->removeProductCommissionFromCommissionsAsyncWithHttpInfo($commission_id, $delete_program_commission_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeProductCommissionFromCommissionsAsyncWithHttpInfo
     *
     * Remove a Product from a Commission Program
     *
     * @param  string $commission_id commission_id (required)
     * @param  \Keap\Core\V2\Model\DeleteProgramCommissionRequest $delete_program_commission_request deleteProgramCommissionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeProductCommissionFromCommissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeProductCommissionFromCommissionsAsyncWithHttpInfo($commission_id, $delete_program_commission_request, string $contentType = self::contentTypes['removeProductCommissionFromCommissions'][0])
    {
        $returnType = '';
        $request = $this->removeProductCommissionFromCommissionsRequest($commission_id, $delete_program_commission_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeProductCommissionFromCommissions'
     *
     * @param  string $commission_id commission_id (required)
     * @param  \Keap\Core\V2\Model\DeleteProgramCommissionRequest $delete_program_commission_request deleteProgramCommissionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeProductCommissionFromCommissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeProductCommissionFromCommissionsRequest($commission_id, $delete_program_commission_request, string $contentType = self::contentTypes['removeProductCommissionFromCommissions'][0])
    {

        // verify the required parameter 'commission_id' is set
        if ($commission_id === null || (is_array($commission_id) && count($commission_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commission_id when calling removeProductCommissionFromCommissions'
            );
        }

        // verify the required parameter 'delete_program_commission_request' is set
        if ($delete_program_commission_request === null || (is_array($delete_program_commission_request) && count($delete_program_commission_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delete_program_commission_request when calling removeProductCommissionFromCommissions'
            );
        }


        $resourcePath = '/v2/affiliates/commissionPrograms/{commission_id}:removeProductCommission';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($commission_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commission_id' . '}',
                ObjectSerializer::toPathValue($commission_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($delete_program_commission_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($delete_program_commission_request));
            } else {
                $httpBody = $delete_program_commission_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeSubscriptionPlanCommissionFromCommissions
     *
     * Remove a Subscription from a Commission Program
     *
     * @param  string $commission_id commission_id (required)
     * @param  \Keap\Core\V2\Model\DeleteSubscriptionPlanCommissionRequest $delete_subscription_plan_commission_request deleteSubscriptionPlanCommissionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSubscriptionPlanCommissionFromCommissions'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeSubscriptionPlanCommissionFromCommissions($commission_id, $delete_subscription_plan_commission_request, string $contentType = self::contentTypes['removeSubscriptionPlanCommissionFromCommissions'][0])
    {
        $this->removeSubscriptionPlanCommissionFromCommissionsWithHttpInfo($commission_id, $delete_subscription_plan_commission_request, $contentType);
    }

    /**
     * Operation removeSubscriptionPlanCommissionFromCommissionsWithHttpInfo
     *
     * Remove a Subscription from a Commission Program
     *
     * @param  string $commission_id commission_id (required)
     * @param  \Keap\Core\V2\Model\DeleteSubscriptionPlanCommissionRequest $delete_subscription_plan_commission_request deleteSubscriptionPlanCommissionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSubscriptionPlanCommissionFromCommissions'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeSubscriptionPlanCommissionFromCommissionsWithHttpInfo($commission_id, $delete_subscription_plan_commission_request, string $contentType = self::contentTypes['removeSubscriptionPlanCommissionFromCommissions'][0])
    {
        $request = $this->removeSubscriptionPlanCommissionFromCommissionsRequest($commission_id, $delete_subscription_plan_commission_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation removeSubscriptionPlanCommissionFromCommissionsAsync
     *
     * Remove a Subscription from a Commission Program
     *
     * @param  string $commission_id commission_id (required)
     * @param  \Keap\Core\V2\Model\DeleteSubscriptionPlanCommissionRequest $delete_subscription_plan_commission_request deleteSubscriptionPlanCommissionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSubscriptionPlanCommissionFromCommissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeSubscriptionPlanCommissionFromCommissionsAsync($commission_id, $delete_subscription_plan_commission_request, string $contentType = self::contentTypes['removeSubscriptionPlanCommissionFromCommissions'][0])
    {
        return $this->removeSubscriptionPlanCommissionFromCommissionsAsyncWithHttpInfo($commission_id, $delete_subscription_plan_commission_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeSubscriptionPlanCommissionFromCommissionsAsyncWithHttpInfo
     *
     * Remove a Subscription from a Commission Program
     *
     * @param  string $commission_id commission_id (required)
     * @param  \Keap\Core\V2\Model\DeleteSubscriptionPlanCommissionRequest $delete_subscription_plan_commission_request deleteSubscriptionPlanCommissionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSubscriptionPlanCommissionFromCommissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeSubscriptionPlanCommissionFromCommissionsAsyncWithHttpInfo($commission_id, $delete_subscription_plan_commission_request, string $contentType = self::contentTypes['removeSubscriptionPlanCommissionFromCommissions'][0])
    {
        $returnType = '';
        $request = $this->removeSubscriptionPlanCommissionFromCommissionsRequest($commission_id, $delete_subscription_plan_commission_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeSubscriptionPlanCommissionFromCommissions'
     *
     * @param  string $commission_id commission_id (required)
     * @param  \Keap\Core\V2\Model\DeleteSubscriptionPlanCommissionRequest $delete_subscription_plan_commission_request deleteSubscriptionPlanCommissionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSubscriptionPlanCommissionFromCommissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeSubscriptionPlanCommissionFromCommissionsRequest($commission_id, $delete_subscription_plan_commission_request, string $contentType = self::contentTypes['removeSubscriptionPlanCommissionFromCommissions'][0])
    {

        // verify the required parameter 'commission_id' is set
        if ($commission_id === null || (is_array($commission_id) && count($commission_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commission_id when calling removeSubscriptionPlanCommissionFromCommissions'
            );
        }

        // verify the required parameter 'delete_subscription_plan_commission_request' is set
        if ($delete_subscription_plan_commission_request === null || (is_array($delete_subscription_plan_commission_request) && count($delete_subscription_plan_commission_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delete_subscription_plan_commission_request when calling removeSubscriptionPlanCommissionFromCommissions'
            );
        }


        $resourcePath = '/v2/affiliates/commissionPrograms/{commission_id}:removeSubscriptionCommission';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($commission_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commission_id' . '}',
                ObjectSerializer::toPathValue($commission_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($delete_subscription_plan_commission_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($delete_subscription_plan_commission_request));
            } else {
                $httpBody = $delete_subscription_plan_commission_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAffiliate
     *
     * Update an Affiliate
     *
     * @param  string $id id (required)
     * @param  \Keap\Core\V2\Model\UpdateAffiliateRequest|null $update_affiliate_request Request to update an affiliate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAffiliate'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\RestAffiliate|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error
     */
    public function updateAffiliate($id, $update_affiliate_request = null, string $contentType = self::contentTypes['updateAffiliate'][0])
    {
        list($response) = $this->updateAffiliateWithHttpInfo($id, $update_affiliate_request, $contentType);
        return $response;
    }

    /**
     * Operation updateAffiliateWithHttpInfo
     *
     * Update an Affiliate
     *
     * @param  string $id id (required)
     * @param  \Keap\Core\V2\Model\UpdateAffiliateRequest|null $update_affiliate_request Request to update an affiliate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAffiliate'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\RestAffiliate|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAffiliateWithHttpInfo($id, $update_affiliate_request = null, string $contentType = self::contentTypes['updateAffiliate'][0])
    {
        $request = $this->updateAffiliateRequest($id, $update_affiliate_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\RestAffiliate',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\RestAffiliate',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\RestAffiliate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateAffiliateAsync
     *
     * Update an Affiliate
     *
     * @param  string $id id (required)
     * @param  \Keap\Core\V2\Model\UpdateAffiliateRequest|null $update_affiliate_request Request to update an affiliate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAffiliate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAffiliateAsync($id, $update_affiliate_request = null, string $contentType = self::contentTypes['updateAffiliate'][0])
    {
        return $this->updateAffiliateAsyncWithHttpInfo($id, $update_affiliate_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAffiliateAsyncWithHttpInfo
     *
     * Update an Affiliate
     *
     * @param  string $id id (required)
     * @param  \Keap\Core\V2\Model\UpdateAffiliateRequest|null $update_affiliate_request Request to update an affiliate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAffiliate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAffiliateAsyncWithHttpInfo($id, $update_affiliate_request = null, string $contentType = self::contentTypes['updateAffiliate'][0])
    {
        $returnType = '\Keap\Core\V2\Model\RestAffiliate';
        $request = $this->updateAffiliateRequest($id, $update_affiliate_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAffiliate'
     *
     * @param  string $id id (required)
     * @param  \Keap\Core\V2\Model\UpdateAffiliateRequest|null $update_affiliate_request Request to update an affiliate (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAffiliate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAffiliateRequest($id, $update_affiliate_request = null, string $contentType = self::contentTypes['updateAffiliate'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateAffiliate'
            );
        }



        $resourcePath = '/v2/affiliates/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_affiliate_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_affiliate_request));
            } else {
                $httpBody = $update_affiliate_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCommissionProgram
     *
     * Update an Affiliate Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Keap\Core\V2\Model\UpdateCommissionProgramRequest $update_commission_program_request updateCommissionProgramRequest (required)
     * @param  string[]|null $update_mask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCommissionProgram'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\AffiliateCommissionProgramResponse|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error
     */
    public function updateCommissionProgram($commission_program_id, $update_commission_program_request, $update_mask = null, string $contentType = self::contentTypes['updateCommissionProgram'][0])
    {
        list($response) = $this->updateCommissionProgramWithHttpInfo($commission_program_id, $update_commission_program_request, $update_mask, $contentType);
        return $response;
    }

    /**
     * Operation updateCommissionProgramWithHttpInfo
     *
     * Update an Affiliate Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Keap\Core\V2\Model\UpdateCommissionProgramRequest $update_commission_program_request updateCommissionProgramRequest (required)
     * @param  string[]|null $update_mask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCommissionProgram'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\AffiliateCommissionProgramResponse|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCommissionProgramWithHttpInfo($commission_program_id, $update_commission_program_request, $update_mask = null, string $contentType = self::contentTypes['updateCommissionProgram'][0])
    {
        $request = $this->updateCommissionProgramRequest($commission_program_id, $update_commission_program_request, $update_mask, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\AffiliateCommissionProgramResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\AffiliateCommissionProgramResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\AffiliateCommissionProgramResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateCommissionProgramAsync
     *
     * Update an Affiliate Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Keap\Core\V2\Model\UpdateCommissionProgramRequest $update_commission_program_request updateCommissionProgramRequest (required)
     * @param  string[]|null $update_mask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCommissionProgramAsync($commission_program_id, $update_commission_program_request, $update_mask = null, string $contentType = self::contentTypes['updateCommissionProgram'][0])
    {
        return $this->updateCommissionProgramAsyncWithHttpInfo($commission_program_id, $update_commission_program_request, $update_mask, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCommissionProgramAsyncWithHttpInfo
     *
     * Update an Affiliate Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Keap\Core\V2\Model\UpdateCommissionProgramRequest $update_commission_program_request updateCommissionProgramRequest (required)
     * @param  string[]|null $update_mask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCommissionProgramAsyncWithHttpInfo($commission_program_id, $update_commission_program_request, $update_mask = null, string $contentType = self::contentTypes['updateCommissionProgram'][0])
    {
        $returnType = '\Keap\Core\V2\Model\AffiliateCommissionProgramResponse';
        $request = $this->updateCommissionProgramRequest($commission_program_id, $update_commission_program_request, $update_mask, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCommissionProgram'
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Keap\Core\V2\Model\UpdateCommissionProgramRequest $update_commission_program_request updateCommissionProgramRequest (required)
     * @param  string[]|null $update_mask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCommissionProgramRequest($commission_program_id, $update_commission_program_request, $update_mask = null, string $contentType = self::contentTypes['updateCommissionProgram'][0])
    {

        // verify the required parameter 'commission_program_id' is set
        if ($commission_program_id === null || (is_array($commission_program_id) && count($commission_program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commission_program_id when calling updateCommissionProgram'
            );
        }

        // verify the required parameter 'update_commission_program_request' is set
        if ($update_commission_program_request === null || (is_array($update_commission_program_request) && count($update_commission_program_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_commission_program_request when calling updateCommissionProgram'
            );
        }



        $resourcePath = '/v2/affiliates/commissionPrograms/{commission_program_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $update_mask,
            'update_mask', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($commission_program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commission_program_id' . '}',
                ObjectSerializer::toPathValue($commission_program_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_commission_program_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_commission_program_request));
            } else {
                $httpBody = $update_commission_program_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDefaultCommissionProgram
     *
     * Update a Default Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[]|null $update_mask update_mask (optional)
     * @param  \Keap\Core\V2\Model\UpdateDefaultCommissionProgramRequest|null $update_default_commission_program_request Values of the default Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDefaultCommissionProgram'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\SetDefaultCommissionProgramResponse|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error
     */
    public function updateDefaultCommissionProgram($commission_program_id, $update_mask = null, $update_default_commission_program_request = null, string $contentType = self::contentTypes['updateDefaultCommissionProgram'][0])
    {
        list($response) = $this->updateDefaultCommissionProgramWithHttpInfo($commission_program_id, $update_mask, $update_default_commission_program_request, $contentType);
        return $response;
    }

    /**
     * Operation updateDefaultCommissionProgramWithHttpInfo
     *
     * Update a Default Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[]|null $update_mask update_mask (optional)
     * @param  \Keap\Core\V2\Model\UpdateDefaultCommissionProgramRequest|null $update_default_commission_program_request Values of the default Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDefaultCommissionProgram'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\SetDefaultCommissionProgramResponse|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDefaultCommissionProgramWithHttpInfo($commission_program_id, $update_mask = null, $update_default_commission_program_request = null, string $contentType = self::contentTypes['updateDefaultCommissionProgram'][0])
    {
        $request = $this->updateDefaultCommissionProgramRequest($commission_program_id, $update_mask, $update_default_commission_program_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\SetDefaultCommissionProgramResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\SetDefaultCommissionProgramResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\SetDefaultCommissionProgramResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateDefaultCommissionProgramAsync
     *
     * Update a Default Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[]|null $update_mask update_mask (optional)
     * @param  \Keap\Core\V2\Model\UpdateDefaultCommissionProgramRequest|null $update_default_commission_program_request Values of the default Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDefaultCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDefaultCommissionProgramAsync($commission_program_id, $update_mask = null, $update_default_commission_program_request = null, string $contentType = self::contentTypes['updateDefaultCommissionProgram'][0])
    {
        return $this->updateDefaultCommissionProgramAsyncWithHttpInfo($commission_program_id, $update_mask, $update_default_commission_program_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDefaultCommissionProgramAsyncWithHttpInfo
     *
     * Update a Default Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[]|null $update_mask update_mask (optional)
     * @param  \Keap\Core\V2\Model\UpdateDefaultCommissionProgramRequest|null $update_default_commission_program_request Values of the default Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDefaultCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDefaultCommissionProgramAsyncWithHttpInfo($commission_program_id, $update_mask = null, $update_default_commission_program_request = null, string $contentType = self::contentTypes['updateDefaultCommissionProgram'][0])
    {
        $returnType = '\Keap\Core\V2\Model\SetDefaultCommissionProgramResponse';
        $request = $this->updateDefaultCommissionProgramRequest($commission_program_id, $update_mask, $update_default_commission_program_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDefaultCommissionProgram'
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[]|null $update_mask update_mask (optional)
     * @param  \Keap\Core\V2\Model\UpdateDefaultCommissionProgramRequest|null $update_default_commission_program_request Values of the default Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDefaultCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateDefaultCommissionProgramRequest($commission_program_id, $update_mask = null, $update_default_commission_program_request = null, string $contentType = self::contentTypes['updateDefaultCommissionProgram'][0])
    {

        // verify the required parameter 'commission_program_id' is set
        if ($commission_program_id === null || (is_array($commission_program_id) && count($commission_program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commission_program_id when calling updateDefaultCommissionProgram'
            );
        }




        $resourcePath = '/v2/affiliates/commissionPrograms/defaultCommissionPrograms/{commission_program_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $update_mask,
            'update_mask', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($commission_program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commission_program_id' . '}',
                ObjectSerializer::toPathValue($commission_program_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_default_commission_program_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_default_commission_program_request));
            } else {
                $httpBody = $update_default_commission_program_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateProductCommissionProgram
     *
     * Update a Product Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[]|null $update_mask update_mask (optional)
     * @param  \Keap\Core\V2\Model\UpdateProductCommissionProgramRequest|null $update_product_commission_program_request Values of the product Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProductCommissionProgram'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\ProductCommissionProgram|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error
     */
    public function updateProductCommissionProgram($commission_program_id, $update_mask = null, $update_product_commission_program_request = null, string $contentType = self::contentTypes['updateProductCommissionProgram'][0])
    {
        list($response) = $this->updateProductCommissionProgramWithHttpInfo($commission_program_id, $update_mask, $update_product_commission_program_request, $contentType);
        return $response;
    }

    /**
     * Operation updateProductCommissionProgramWithHttpInfo
     *
     * Update a Product Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[]|null $update_mask update_mask (optional)
     * @param  \Keap\Core\V2\Model\UpdateProductCommissionProgramRequest|null $update_product_commission_program_request Values of the product Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProductCommissionProgram'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\ProductCommissionProgram|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProductCommissionProgramWithHttpInfo($commission_program_id, $update_mask = null, $update_product_commission_program_request = null, string $contentType = self::contentTypes['updateProductCommissionProgram'][0])
    {
        $request = $this->updateProductCommissionProgramRequest($commission_program_id, $update_mask, $update_product_commission_program_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\ProductCommissionProgram',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\ProductCommissionProgram',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\ProductCommissionProgram',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateProductCommissionProgramAsync
     *
     * Update a Product Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[]|null $update_mask update_mask (optional)
     * @param  \Keap\Core\V2\Model\UpdateProductCommissionProgramRequest|null $update_product_commission_program_request Values of the product Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProductCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProductCommissionProgramAsync($commission_program_id, $update_mask = null, $update_product_commission_program_request = null, string $contentType = self::contentTypes['updateProductCommissionProgram'][0])
    {
        return $this->updateProductCommissionProgramAsyncWithHttpInfo($commission_program_id, $update_mask, $update_product_commission_program_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateProductCommissionProgramAsyncWithHttpInfo
     *
     * Update a Product Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[]|null $update_mask update_mask (optional)
     * @param  \Keap\Core\V2\Model\UpdateProductCommissionProgramRequest|null $update_product_commission_program_request Values of the product Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProductCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateProductCommissionProgramAsyncWithHttpInfo($commission_program_id, $update_mask = null, $update_product_commission_program_request = null, string $contentType = self::contentTypes['updateProductCommissionProgram'][0])
    {
        $returnType = '\Keap\Core\V2\Model\ProductCommissionProgram';
        $request = $this->updateProductCommissionProgramRequest($commission_program_id, $update_mask, $update_product_commission_program_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateProductCommissionProgram'
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[]|null $update_mask update_mask (optional)
     * @param  \Keap\Core\V2\Model\UpdateProductCommissionProgramRequest|null $update_product_commission_program_request Values of the product Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProductCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateProductCommissionProgramRequest($commission_program_id, $update_mask = null, $update_product_commission_program_request = null, string $contentType = self::contentTypes['updateProductCommissionProgram'][0])
    {

        // verify the required parameter 'commission_program_id' is set
        if ($commission_program_id === null || (is_array($commission_program_id) && count($commission_program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commission_program_id when calling updateProductCommissionProgram'
            );
        }




        $resourcePath = '/v2/affiliates/commissionPrograms/productCommissionPrograms/{commission_program_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $update_mask,
            'update_mask', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($commission_program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commission_program_id' . '}',
                ObjectSerializer::toPathValue($commission_program_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_product_commission_program_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_product_commission_program_request));
            } else {
                $httpBody = $update_product_commission_program_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateRedirectLink
     *
     * Update an Affiliate Link
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  \Keap\Core\V2\Model\CreateOrUpdateAffiliateLinkRequest $create_or_update_affiliate_link_request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRedirectLink'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\AffiliateLink|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error
     */
    public function updateRedirectLink($redirect_id, $create_or_update_affiliate_link_request, string $contentType = self::contentTypes['updateRedirectLink'][0])
    {
        list($response) = $this->updateRedirectLinkWithHttpInfo($redirect_id, $create_or_update_affiliate_link_request, $contentType);
        return $response;
    }

    /**
     * Operation updateRedirectLinkWithHttpInfo
     *
     * Update an Affiliate Link
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  \Keap\Core\V2\Model\CreateOrUpdateAffiliateLinkRequest $create_or_update_affiliate_link_request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRedirectLink'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\AffiliateLink|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRedirectLinkWithHttpInfo($redirect_id, $create_or_update_affiliate_link_request, string $contentType = self::contentTypes['updateRedirectLink'][0])
    {
        $request = $this->updateRedirectLinkRequest($redirect_id, $create_or_update_affiliate_link_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\AffiliateLink',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\AffiliateLink',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\AffiliateLink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateRedirectLinkAsync
     *
     * Update an Affiliate Link
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  \Keap\Core\V2\Model\CreateOrUpdateAffiliateLinkRequest $create_or_update_affiliate_link_request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRedirectLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRedirectLinkAsync($redirect_id, $create_or_update_affiliate_link_request, string $contentType = self::contentTypes['updateRedirectLink'][0])
    {
        return $this->updateRedirectLinkAsyncWithHttpInfo($redirect_id, $create_or_update_affiliate_link_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateRedirectLinkAsyncWithHttpInfo
     *
     * Update an Affiliate Link
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  \Keap\Core\V2\Model\CreateOrUpdateAffiliateLinkRequest $create_or_update_affiliate_link_request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRedirectLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRedirectLinkAsyncWithHttpInfo($redirect_id, $create_or_update_affiliate_link_request, string $contentType = self::contentTypes['updateRedirectLink'][0])
    {
        $returnType = '\Keap\Core\V2\Model\AffiliateLink';
        $request = $this->updateRedirectLinkRequest($redirect_id, $create_or_update_affiliate_link_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateRedirectLink'
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  \Keap\Core\V2\Model\CreateOrUpdateAffiliateLinkRequest $create_or_update_affiliate_link_request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRedirectLink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateRedirectLinkRequest($redirect_id, $create_or_update_affiliate_link_request, string $contentType = self::contentTypes['updateRedirectLink'][0])
    {

        // verify the required parameter 'redirect_id' is set
        if ($redirect_id === null || (is_array($redirect_id) && count($redirect_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $redirect_id when calling updateRedirectLink'
            );
        }

        // verify the required parameter 'create_or_update_affiliate_link_request' is set
        if ($create_or_update_affiliate_link_request === null || (is_array($create_or_update_affiliate_link_request) && count($create_or_update_affiliate_link_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_or_update_affiliate_link_request when calling updateRedirectLink'
            );
        }


        $resourcePath = '/v2/affiliates/redirects/{redirect_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($redirect_id !== null) {
            $resourcePath = str_replace(
                '{' . 'redirect_id' . '}',
                ObjectSerializer::toPathValue($redirect_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_or_update_affiliate_link_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_or_update_affiliate_link_request));
            } else {
                $httpBody = $create_or_update_affiliate_link_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSubscriptionCommissionProgram
     *
     * Update a Subscription Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[]|null $update_mask update_mask (optional)
     * @param  \Keap\Core\V2\Model\UpdateSubscriptionCommissionProgramRequest|null $update_subscription_commission_program_request Values of the subscription Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscriptionCommissionProgram'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\SubscriptionCommissionProgram|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error
     */
    public function updateSubscriptionCommissionProgram($commission_program_id, $update_mask = null, $update_subscription_commission_program_request = null, string $contentType = self::contentTypes['updateSubscriptionCommissionProgram'][0])
    {
        list($response) = $this->updateSubscriptionCommissionProgramWithHttpInfo($commission_program_id, $update_mask, $update_subscription_commission_program_request, $contentType);
        return $response;
    }

    /**
     * Operation updateSubscriptionCommissionProgramWithHttpInfo
     *
     * Update a Subscription Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[]|null $update_mask update_mask (optional)
     * @param  \Keap\Core\V2\Model\UpdateSubscriptionCommissionProgramRequest|null $update_subscription_commission_program_request Values of the subscription Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscriptionCommissionProgram'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\SubscriptionCommissionProgram|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error|\Keap\Core\V2\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSubscriptionCommissionProgramWithHttpInfo($commission_program_id, $update_mask = null, $update_subscription_commission_program_request = null, string $contentType = self::contentTypes['updateSubscriptionCommissionProgram'][0])
    {
        $request = $this->updateSubscriptionCommissionProgramRequest($commission_program_id, $update_mask, $update_subscription_commission_program_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\SubscriptionCommissionProgram',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\SubscriptionCommissionProgram',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\SubscriptionCommissionProgram',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateSubscriptionCommissionProgramAsync
     *
     * Update a Subscription Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[]|null $update_mask update_mask (optional)
     * @param  \Keap\Core\V2\Model\UpdateSubscriptionCommissionProgramRequest|null $update_subscription_commission_program_request Values of the subscription Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscriptionCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSubscriptionCommissionProgramAsync($commission_program_id, $update_mask = null, $update_subscription_commission_program_request = null, string $contentType = self::contentTypes['updateSubscriptionCommissionProgram'][0])
    {
        return $this->updateSubscriptionCommissionProgramAsyncWithHttpInfo($commission_program_id, $update_mask, $update_subscription_commission_program_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSubscriptionCommissionProgramAsyncWithHttpInfo
     *
     * Update a Subscription Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[]|null $update_mask update_mask (optional)
     * @param  \Keap\Core\V2\Model\UpdateSubscriptionCommissionProgramRequest|null $update_subscription_commission_program_request Values of the subscription Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscriptionCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSubscriptionCommissionProgramAsyncWithHttpInfo($commission_program_id, $update_mask = null, $update_subscription_commission_program_request = null, string $contentType = self::contentTypes['updateSubscriptionCommissionProgram'][0])
    {
        $returnType = '\Keap\Core\V2\Model\SubscriptionCommissionProgram';
        $request = $this->updateSubscriptionCommissionProgramRequest($commission_program_id, $update_mask, $update_subscription_commission_program_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSubscriptionCommissionProgram'
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[]|null $update_mask update_mask (optional)
     * @param  \Keap\Core\V2\Model\UpdateSubscriptionCommissionProgramRequest|null $update_subscription_commission_program_request Values of the subscription Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSubscriptionCommissionProgram'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSubscriptionCommissionProgramRequest($commission_program_id, $update_mask = null, $update_subscription_commission_program_request = null, string $contentType = self::contentTypes['updateSubscriptionCommissionProgram'][0])
    {

        // verify the required parameter 'commission_program_id' is set
        if ($commission_program_id === null || (is_array($commission_program_id) && count($commission_program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commission_program_id when calling updateSubscriptionCommissionProgram'
            );
        }




        $resourcePath = '/v2/affiliates/commissionPrograms/subscriptionCommissionPrograms/{commission_program_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $update_mask,
            'update_mask', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($commission_program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commission_program_id' . '}',
                ObjectSerializer::toPathValue($commission_program_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_subscription_commission_program_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_subscription_commission_program_request));
            } else {
                $httpBody = $update_subscription_commission_program_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
