<?php
/**
 * DealsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Keap\Core\V2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.812056
 * Contact: api@keap.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Keap\Core\V2\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Keap\Core\V2\ApiException;
use Keap\Core\V2\Configuration;
use Keap\Core\V2\FormDataProcessor;
use Keap\Core\V2\HeaderSelector;
use Keap\Core\V2\ObjectSerializer;

/**
 * DealsApi Class Doc Comment
 *
 * @category Class
 * @package  Keap\Core\V2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DealsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createDeal' => [
            'application/json',
        ],
        'createNote' => [
            'application/json',
        ],
        'createNotesBulk' => [
            'application/json',
        ],
        'deleteDeal' => [
            'application/json',
        ],
        'deleteNote' => [
            'application/json',
        ],
        'getDeal' => [
            'application/json',
        ],
        'getNote' => [
            'application/json',
        ],
        'listDeals' => [
            'application/json',
        ],
        'listNotes' => [
            'application/json',
        ],
        'moveDealsForContacts' => [
            'application/json',
        ],
        'updateNote' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createDeal
     *
     * Creates a new deal.
     *
     * @param  \Keap\Core\V2\Model\CreateDealRequest $create_deal_request the request body containing deal details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeal'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\Deal
     */
    public function createDeal($create_deal_request, string $contentType = self::contentTypes['createDeal'][0])
    {
        list($response) = $this->createDealWithHttpInfo($create_deal_request, $contentType);
        return $response;
    }

    /**
     * Operation createDealWithHttpInfo
     *
     * Creates a new deal.
     *
     * @param  \Keap\Core\V2\Model\CreateDealRequest $create_deal_request the request body containing deal details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeal'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\Deal, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDealWithHttpInfo($create_deal_request, string $contentType = self::contentTypes['createDeal'][0])
    {
        $request = $this->createDealRequest($create_deal_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Deal',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\Deal',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Deal',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createDealAsync
     *
     * Creates a new deal.
     *
     * @param  \Keap\Core\V2\Model\CreateDealRequest $create_deal_request the request body containing deal details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDealAsync($create_deal_request, string $contentType = self::contentTypes['createDeal'][0])
    {
        return $this->createDealAsyncWithHttpInfo($create_deal_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDealAsyncWithHttpInfo
     *
     * Creates a new deal.
     *
     * @param  \Keap\Core\V2\Model\CreateDealRequest $create_deal_request the request body containing deal details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDealAsyncWithHttpInfo($create_deal_request, string $contentType = self::contentTypes['createDeal'][0])
    {
        $returnType = '\Keap\Core\V2\Model\Deal';
        $request = $this->createDealRequest($create_deal_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDeal'
     *
     * @param  \Keap\Core\V2\Model\CreateDealRequest $create_deal_request the request body containing deal details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDeal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDealRequest($create_deal_request, string $contentType = self::contentTypes['createDeal'][0])
    {

        // verify the required parameter 'create_deal_request' is set
        if ($create_deal_request === null || (is_array($create_deal_request) && count($create_deal_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_deal_request when calling createDeal'
            );
        }


        $resourcePath = '/v2/deals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_deal_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_deal_request));
            } else {
                $httpBody = $create_deal_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNote
     *
     * Creates a new note for a specific deal.
     *
     * @param  string $id the deal ID to associate the new note with (required)
     * @param  \Keap\Core\V2\Model\CreateDealNoteRequest $create_deal_note_request the request body containing note details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNote'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\DealNote
     */
    public function createNote($id, $create_deal_note_request, string $contentType = self::contentTypes['createNote'][0])
    {
        list($response) = $this->createNoteWithHttpInfo($id, $create_deal_note_request, $contentType);
        return $response;
    }

    /**
     * Operation createNoteWithHttpInfo
     *
     * Creates a new note for a specific deal.
     *
     * @param  string $id the deal ID to associate the new note with (required)
     * @param  \Keap\Core\V2\Model\CreateDealNoteRequest $create_deal_note_request the request body containing note details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNote'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\DealNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNoteWithHttpInfo($id, $create_deal_note_request, string $contentType = self::contentTypes['createNote'][0])
    {
        $request = $this->createNoteRequest($id, $create_deal_note_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\DealNote',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\DealNote',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\DealNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createNoteAsync
     *
     * Creates a new note for a specific deal.
     *
     * @param  string $id the deal ID to associate the new note with (required)
     * @param  \Keap\Core\V2\Model\CreateDealNoteRequest $create_deal_note_request the request body containing note details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNoteAsync($id, $create_deal_note_request, string $contentType = self::contentTypes['createNote'][0])
    {
        return $this->createNoteAsyncWithHttpInfo($id, $create_deal_note_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNoteAsyncWithHttpInfo
     *
     * Creates a new note for a specific deal.
     *
     * @param  string $id the deal ID to associate the new note with (required)
     * @param  \Keap\Core\V2\Model\CreateDealNoteRequest $create_deal_note_request the request body containing note details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNoteAsyncWithHttpInfo($id, $create_deal_note_request, string $contentType = self::contentTypes['createNote'][0])
    {
        $returnType = '\Keap\Core\V2\Model\DealNote';
        $request = $this->createNoteRequest($id, $create_deal_note_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNote'
     *
     * @param  string $id the deal ID to associate the new note with (required)
     * @param  \Keap\Core\V2\Model\CreateDealNoteRequest $create_deal_note_request the request body containing note details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNoteRequest($id, $create_deal_note_request, string $contentType = self::contentTypes['createNote'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling createNote'
            );
        }

        // verify the required parameter 'create_deal_note_request' is set
        if ($create_deal_note_request === null || (is_array($create_deal_note_request) && count($create_deal_note_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_deal_note_request when calling createNote'
            );
        }


        $resourcePath = '/v2/deals/{id}/notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_deal_note_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_deal_note_request));
            } else {
                $httpBody = $create_deal_note_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNotesBulk
     *
     * Creates new notes in bulk.
     *
     * @param  \Keap\Core\V2\Model\BulkCreateDealNotesRequest $bulk_create_deal_notes_request the request body containing note details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNotesBulk'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\BulkCreateDealNotesResponse
     */
    public function createNotesBulk($bulk_create_deal_notes_request, string $contentType = self::contentTypes['createNotesBulk'][0])
    {
        list($response) = $this->createNotesBulkWithHttpInfo($bulk_create_deal_notes_request, $contentType);
        return $response;
    }

    /**
     * Operation createNotesBulkWithHttpInfo
     *
     * Creates new notes in bulk.
     *
     * @param  \Keap\Core\V2\Model\BulkCreateDealNotesRequest $bulk_create_deal_notes_request the request body containing note details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNotesBulk'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\BulkCreateDealNotesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNotesBulkWithHttpInfo($bulk_create_deal_notes_request, string $contentType = self::contentTypes['createNotesBulk'][0])
    {
        $request = $this->createNotesBulkRequest($bulk_create_deal_notes_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\BulkCreateDealNotesResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\BulkCreateDealNotesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\BulkCreateDealNotesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createNotesBulkAsync
     *
     * Creates new notes in bulk.
     *
     * @param  \Keap\Core\V2\Model\BulkCreateDealNotesRequest $bulk_create_deal_notes_request the request body containing note details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNotesBulk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNotesBulkAsync($bulk_create_deal_notes_request, string $contentType = self::contentTypes['createNotesBulk'][0])
    {
        return $this->createNotesBulkAsyncWithHttpInfo($bulk_create_deal_notes_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNotesBulkAsyncWithHttpInfo
     *
     * Creates new notes in bulk.
     *
     * @param  \Keap\Core\V2\Model\BulkCreateDealNotesRequest $bulk_create_deal_notes_request the request body containing note details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNotesBulk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNotesBulkAsyncWithHttpInfo($bulk_create_deal_notes_request, string $contentType = self::contentTypes['createNotesBulk'][0])
    {
        $returnType = '\Keap\Core\V2\Model\BulkCreateDealNotesResponse';
        $request = $this->createNotesBulkRequest($bulk_create_deal_notes_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNotesBulk'
     *
     * @param  \Keap\Core\V2\Model\BulkCreateDealNotesRequest $bulk_create_deal_notes_request the request body containing note details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNotesBulk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNotesBulkRequest($bulk_create_deal_notes_request, string $contentType = self::contentTypes['createNotesBulk'][0])
    {

        // verify the required parameter 'bulk_create_deal_notes_request' is set
        if ($bulk_create_deal_notes_request === null || (is_array($bulk_create_deal_notes_request) && count($bulk_create_deal_notes_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulk_create_deal_notes_request when calling createNotesBulk'
            );
        }


        $resourcePath = '/v2/deals/-/notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($bulk_create_deal_notes_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($bulk_create_deal_notes_request));
            } else {
                $httpBody = $bulk_create_deal_notes_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDeal
     *
     * Deletes a specific deal by its ID.
     *
     * @param  string $id the ID of the deal to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDeal'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteDeal($id, string $contentType = self::contentTypes['deleteDeal'][0])
    {
        $this->deleteDealWithHttpInfo($id, $contentType);
    }

    /**
     * Operation deleteDealWithHttpInfo
     *
     * Deletes a specific deal by its ID.
     *
     * @param  string $id the ID of the deal to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDeal'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDealWithHttpInfo($id, string $contentType = self::contentTypes['deleteDeal'][0])
    {
        $request = $this->deleteDealRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteDealAsync
     *
     * Deletes a specific deal by its ID.
     *
     * @param  string $id the ID of the deal to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDeal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDealAsync($id, string $contentType = self::contentTypes['deleteDeal'][0])
    {
        return $this->deleteDealAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDealAsyncWithHttpInfo
     *
     * Deletes a specific deal by its ID.
     *
     * @param  string $id the ID of the deal to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDeal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDealAsyncWithHttpInfo($id, string $contentType = self::contentTypes['deleteDeal'][0])
    {
        $returnType = '';
        $request = $this->deleteDealRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDeal'
     *
     * @param  string $id the ID of the deal to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDeal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDealRequest($id, string $contentType = self::contentTypes['deleteDeal'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteDeal'
            );
        }


        $resourcePath = '/v2/deals/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteNote
     *
     * Deletes a specific deal note by its ID.
     *
     * @param  string $note_id the ID of the note to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNote'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteNote($note_id, string $contentType = self::contentTypes['deleteNote'][0])
    {
        $this->deleteNoteWithHttpInfo($note_id, $contentType);
    }

    /**
     * Operation deleteNoteWithHttpInfo
     *
     * Deletes a specific deal note by its ID.
     *
     * @param  string $note_id the ID of the note to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNote'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNoteWithHttpInfo($note_id, string $contentType = self::contentTypes['deleteNote'][0])
    {
        $request = $this->deleteNoteRequest($note_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteNoteAsync
     *
     * Deletes a specific deal note by its ID.
     *
     * @param  string $note_id the ID of the note to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNoteAsync($note_id, string $contentType = self::contentTypes['deleteNote'][0])
    {
        return $this->deleteNoteAsyncWithHttpInfo($note_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNoteAsyncWithHttpInfo
     *
     * Deletes a specific deal note by its ID.
     *
     * @param  string $note_id the ID of the note to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNoteAsyncWithHttpInfo($note_id, string $contentType = self::contentTypes['deleteNote'][0])
    {
        $returnType = '';
        $request = $this->deleteNoteRequest($note_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteNote'
     *
     * @param  string $note_id the ID of the note to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteNoteRequest($note_id, string $contentType = self::contentTypes['deleteNote'][0])
    {

        // verify the required parameter 'note_id' is set
        if ($note_id === null || (is_array($note_id) && count($note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note_id when calling deleteNote'
            );
        }


        $resourcePath = '/v2/deals/-/notes/{note_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'note_id' . '}',
                ObjectSerializer::toPathValue($note_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDeal
     *
     * Retrieves a specific deal by its ID.
     *
     * @param  string $id the ID of the deal to retrieve (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeal'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\Deal
     */
    public function getDeal($id, string $contentType = self::contentTypes['getDeal'][0])
    {
        list($response) = $this->getDealWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getDealWithHttpInfo
     *
     * Retrieves a specific deal by its ID.
     *
     * @param  string $id the ID of the deal to retrieve (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeal'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\Deal, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDealWithHttpInfo($id, string $contentType = self::contentTypes['getDeal'][0])
    {
        $request = $this->getDealRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\Deal',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\Deal',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\Deal',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getDealAsync
     *
     * Retrieves a specific deal by its ID.
     *
     * @param  string $id the ID of the deal to retrieve (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDealAsync($id, string $contentType = self::contentTypes['getDeal'][0])
    {
        return $this->getDealAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDealAsyncWithHttpInfo
     *
     * Retrieves a specific deal by its ID.
     *
     * @param  string $id the ID of the deal to retrieve (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDealAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getDeal'][0])
    {
        $returnType = '\Keap\Core\V2\Model\Deal';
        $request = $this->getDealRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeal'
     *
     * @param  string $id the ID of the deal to retrieve (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDealRequest($id, string $contentType = self::contentTypes['getDeal'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDeal'
            );
        }


        $resourcePath = '/v2/deals/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNote
     *
     * Retrieves a specific deal note by its ID.
     *
     * @param  string $note_id the ID of the note to retrieve (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNote'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\DealNote
     */
    public function getNote($note_id, string $contentType = self::contentTypes['getNote'][0])
    {
        list($response) = $this->getNoteWithHttpInfo($note_id, $contentType);
        return $response;
    }

    /**
     * Operation getNoteWithHttpInfo
     *
     * Retrieves a specific deal note by its ID.
     *
     * @param  string $note_id the ID of the note to retrieve (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNote'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\DealNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNoteWithHttpInfo($note_id, string $contentType = self::contentTypes['getNote'][0])
    {
        $request = $this->getNoteRequest($note_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\DealNote',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\DealNote',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\DealNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getNoteAsync
     *
     * Retrieves a specific deal note by its ID.
     *
     * @param  string $note_id the ID of the note to retrieve (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNoteAsync($note_id, string $contentType = self::contentTypes['getNote'][0])
    {
        return $this->getNoteAsyncWithHttpInfo($note_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNoteAsyncWithHttpInfo
     *
     * Retrieves a specific deal note by its ID.
     *
     * @param  string $note_id the ID of the note to retrieve (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNoteAsyncWithHttpInfo($note_id, string $contentType = self::contentTypes['getNote'][0])
    {
        $returnType = '\Keap\Core\V2\Model\DealNote';
        $request = $this->getNoteRequest($note_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNote'
     *
     * @param  string $note_id the ID of the note to retrieve (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNoteRequest($note_id, string $contentType = self::contentTypes['getNote'][0])
    {

        // verify the required parameter 'note_id' is set
        if ($note_id === null || (is_array($note_id) && count($note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note_id when calling getNote'
            );
        }


        $resourcePath = '/v2/deals/-/notes/{note_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'note_id' . '}',
                ObjectSerializer::toPathValue($note_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDeals
     *
     * Lists all deals associated with a specific contact.
     *
     * @param  string $contact_id the contact ID to list deals for (required)
     * @param  string|null $filter filter (optional)
     * @param  string|null $page_token page_token (optional)
     * @param  string|null $order_by order_by (optional)
     * @param  int|null $page_size page_size (optional, default to 1000)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDeals'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\DealListResponse
     */
    public function listDeals($contact_id, $filter = null, $page_token = null, $order_by = null, $page_size = 1000, string $contentType = self::contentTypes['listDeals'][0])
    {
        list($response) = $this->listDealsWithHttpInfo($contact_id, $filter, $page_token, $order_by, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation listDealsWithHttpInfo
     *
     * Lists all deals associated with a specific contact.
     *
     * @param  string $contact_id the contact ID to list deals for (required)
     * @param  string|null $filter (optional)
     * @param  string|null $page_token (optional)
     * @param  string|null $order_by (optional)
     * @param  int|null $page_size (optional, default to 1000)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDeals'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\DealListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDealsWithHttpInfo($contact_id, $filter = null, $page_token = null, $order_by = null, $page_size = 1000, string $contentType = self::contentTypes['listDeals'][0])
    {
        $request = $this->listDealsRequest($contact_id, $filter, $page_token, $order_by, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\DealListResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\DealListResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\DealListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listDealsAsync
     *
     * Lists all deals associated with a specific contact.
     *
     * @param  string $contact_id the contact ID to list deals for (required)
     * @param  string|null $filter (optional)
     * @param  string|null $page_token (optional)
     * @param  string|null $order_by (optional)
     * @param  int|null $page_size (optional, default to 1000)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDeals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDealsAsync($contact_id, $filter = null, $page_token = null, $order_by = null, $page_size = 1000, string $contentType = self::contentTypes['listDeals'][0])
    {
        return $this->listDealsAsyncWithHttpInfo($contact_id, $filter, $page_token, $order_by, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDealsAsyncWithHttpInfo
     *
     * Lists all deals associated with a specific contact.
     *
     * @param  string $contact_id the contact ID to list deals for (required)
     * @param  string|null $filter (optional)
     * @param  string|null $page_token (optional)
     * @param  string|null $order_by (optional)
     * @param  int|null $page_size (optional, default to 1000)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDeals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDealsAsyncWithHttpInfo($contact_id, $filter = null, $page_token = null, $order_by = null, $page_size = 1000, string $contentType = self::contentTypes['listDeals'][0])
    {
        $returnType = '\Keap\Core\V2\Model\DealListResponse';
        $request = $this->listDealsRequest($contact_id, $filter, $page_token, $order_by, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDeals'
     *
     * @param  string $contact_id the contact ID to list deals for (required)
     * @param  string|null $filter (optional)
     * @param  string|null $page_token (optional)
     * @param  string|null $order_by (optional)
     * @param  int|null $page_size (optional, default to 1000)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDeals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listDealsRequest($contact_id, $filter = null, $page_token = null, $order_by = null, $page_size = 1000, string $contentType = self::contentTypes['listDeals'][0])
    {

        // verify the required parameter 'contact_id' is set
        if ($contact_id === null || (is_array($contact_id) && count($contact_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contact_id when calling listDeals'
            );
        }




        if ($page_size !== null && $page_size > 1000) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling DealsApi.listDeals, must be smaller than or equal to 1000.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling DealsApi.listDeals, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v2/deals/-/contacts/{contact_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_token,
            'page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'order_by', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($contact_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contact_id' . '}',
                ObjectSerializer::toPathValue($contact_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listNotes
     *
     * Lists all notes associated with a specific deal.
     *
     * @param  string $id the deal ID to list notes for (required)
     * @param  string|null $filter filter (optional)
     * @param  string|null $page_token page_token (optional)
     * @param  string|null $order_by order_by (optional)
     * @param  int|null $page_size page_size (optional, default to 1000)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listNotes'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\DealNoteListResponse
     */
    public function listNotes($id, $filter = null, $page_token = null, $order_by = null, $page_size = 1000, string $contentType = self::contentTypes['listNotes'][0])
    {
        list($response) = $this->listNotesWithHttpInfo($id, $filter, $page_token, $order_by, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation listNotesWithHttpInfo
     *
     * Lists all notes associated with a specific deal.
     *
     * @param  string $id the deal ID to list notes for (required)
     * @param  string|null $filter (optional)
     * @param  string|null $page_token (optional)
     * @param  string|null $order_by (optional)
     * @param  int|null $page_size (optional, default to 1000)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listNotes'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\DealNoteListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listNotesWithHttpInfo($id, $filter = null, $page_token = null, $order_by = null, $page_size = 1000, string $contentType = self::contentTypes['listNotes'][0])
    {
        $request = $this->listNotesRequest($id, $filter, $page_token, $order_by, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\DealNoteListResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\DealNoteListResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\DealNoteListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listNotesAsync
     *
     * Lists all notes associated with a specific deal.
     *
     * @param  string $id the deal ID to list notes for (required)
     * @param  string|null $filter (optional)
     * @param  string|null $page_token (optional)
     * @param  string|null $order_by (optional)
     * @param  int|null $page_size (optional, default to 1000)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listNotes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listNotesAsync($id, $filter = null, $page_token = null, $order_by = null, $page_size = 1000, string $contentType = self::contentTypes['listNotes'][0])
    {
        return $this->listNotesAsyncWithHttpInfo($id, $filter, $page_token, $order_by, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listNotesAsyncWithHttpInfo
     *
     * Lists all notes associated with a specific deal.
     *
     * @param  string $id the deal ID to list notes for (required)
     * @param  string|null $filter (optional)
     * @param  string|null $page_token (optional)
     * @param  string|null $order_by (optional)
     * @param  int|null $page_size (optional, default to 1000)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listNotes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listNotesAsyncWithHttpInfo($id, $filter = null, $page_token = null, $order_by = null, $page_size = 1000, string $contentType = self::contentTypes['listNotes'][0])
    {
        $returnType = '\Keap\Core\V2\Model\DealNoteListResponse';
        $request = $this->listNotesRequest($id, $filter, $page_token, $order_by, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listNotes'
     *
     * @param  string $id the deal ID to list notes for (required)
     * @param  string|null $filter (optional)
     * @param  string|null $page_token (optional)
     * @param  string|null $order_by (optional)
     * @param  int|null $page_size (optional, default to 1000)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listNotes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listNotesRequest($id, $filter = null, $page_token = null, $order_by = null, $page_size = 1000, string $contentType = self::contentTypes['listNotes'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling listNotes'
            );
        }




        if ($page_size !== null && $page_size > 1000) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling DealsApi.listNotes, must be smaller than or equal to 1000.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling DealsApi.listNotes, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v2/deals/{id}/notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_token,
            'page_token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'order_by', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation moveDealsForContacts
     *
     * Moves the active deals of specified contacts from one stage to another, in bulk.
     *
     * @param  \Keap\Core\V2\Model\MoveDealsForContactsRequest $move_deals_for_contacts_request the request body containing move details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moveDealsForContacts'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\MoveDealsForContactsResponse
     */
    public function moveDealsForContacts($move_deals_for_contacts_request, string $contentType = self::contentTypes['moveDealsForContacts'][0])
    {
        list($response) = $this->moveDealsForContactsWithHttpInfo($move_deals_for_contacts_request, $contentType);
        return $response;
    }

    /**
     * Operation moveDealsForContactsWithHttpInfo
     *
     * Moves the active deals of specified contacts from one stage to another, in bulk.
     *
     * @param  \Keap\Core\V2\Model\MoveDealsForContactsRequest $move_deals_for_contacts_request the request body containing move details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moveDealsForContacts'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\MoveDealsForContactsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function moveDealsForContactsWithHttpInfo($move_deals_for_contacts_request, string $contentType = self::contentTypes['moveDealsForContacts'][0])
    {
        $request = $this->moveDealsForContactsRequest($move_deals_for_contacts_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\MoveDealsForContactsResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\MoveDealsForContactsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\MoveDealsForContactsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation moveDealsForContactsAsync
     *
     * Moves the active deals of specified contacts from one stage to another, in bulk.
     *
     * @param  \Keap\Core\V2\Model\MoveDealsForContactsRequest $move_deals_for_contacts_request the request body containing move details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moveDealsForContacts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function moveDealsForContactsAsync($move_deals_for_contacts_request, string $contentType = self::contentTypes['moveDealsForContacts'][0])
    {
        return $this->moveDealsForContactsAsyncWithHttpInfo($move_deals_for_contacts_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation moveDealsForContactsAsyncWithHttpInfo
     *
     * Moves the active deals of specified contacts from one stage to another, in bulk.
     *
     * @param  \Keap\Core\V2\Model\MoveDealsForContactsRequest $move_deals_for_contacts_request the request body containing move details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moveDealsForContacts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function moveDealsForContactsAsyncWithHttpInfo($move_deals_for_contacts_request, string $contentType = self::contentTypes['moveDealsForContacts'][0])
    {
        $returnType = '\Keap\Core\V2\Model\MoveDealsForContactsResponse';
        $request = $this->moveDealsForContactsRequest($move_deals_for_contacts_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'moveDealsForContacts'
     *
     * @param  \Keap\Core\V2\Model\MoveDealsForContactsRequest $move_deals_for_contacts_request the request body containing move details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moveDealsForContacts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function moveDealsForContactsRequest($move_deals_for_contacts_request, string $contentType = self::contentTypes['moveDealsForContacts'][0])
    {

        // verify the required parameter 'move_deals_for_contacts_request' is set
        if ($move_deals_for_contacts_request === null || (is_array($move_deals_for_contacts_request) && count($move_deals_for_contacts_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $move_deals_for_contacts_request when calling moveDealsForContacts'
            );
        }


        $resourcePath = '/v2/deals/moveByContactIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($move_deals_for_contacts_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($move_deals_for_contacts_request));
            } else {
                $httpBody = $move_deals_for_contacts_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNote
     *
     * Updates a specific deal note by its ID.
     *
     * @param  string $note_id the ID of the note to update (required)
     * @param  \Keap\Core\V2\Model\UpdateDealNoteRequest $update_deal_note_request the request body containing updated note details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNote'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Keap\Core\V2\Model\DealNote
     */
    public function updateNote($note_id, $update_deal_note_request, string $contentType = self::contentTypes['updateNote'][0])
    {
        list($response) = $this->updateNoteWithHttpInfo($note_id, $update_deal_note_request, $contentType);
        return $response;
    }

    /**
     * Operation updateNoteWithHttpInfo
     *
     * Updates a specific deal note by its ID.
     *
     * @param  string $note_id the ID of the note to update (required)
     * @param  \Keap\Core\V2\Model\UpdateDealNoteRequest $update_deal_note_request the request body containing updated note details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNote'] to see the possible values for this operation
     *
     * @throws \Keap\Core\V2\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Keap\Core\V2\Model\DealNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNoteWithHttpInfo($note_id, $update_deal_note_request, string $contentType = self::contentTypes['updateNote'][0])
    {
        $request = $this->updateNoteRequest($note_id, $update_deal_note_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Keap\Core\V2\Model\DealNote',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Keap\Core\V2\Model\DealNote',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Keap\Core\V2\Model\DealNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateNoteAsync
     *
     * Updates a specific deal note by its ID.
     *
     * @param  string $note_id the ID of the note to update (required)
     * @param  \Keap\Core\V2\Model\UpdateDealNoteRequest $update_deal_note_request the request body containing updated note details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNoteAsync($note_id, $update_deal_note_request, string $contentType = self::contentTypes['updateNote'][0])
    {
        return $this->updateNoteAsyncWithHttpInfo($note_id, $update_deal_note_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNoteAsyncWithHttpInfo
     *
     * Updates a specific deal note by its ID.
     *
     * @param  string $note_id the ID of the note to update (required)
     * @param  \Keap\Core\V2\Model\UpdateDealNoteRequest $update_deal_note_request the request body containing updated note details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNoteAsyncWithHttpInfo($note_id, $update_deal_note_request, string $contentType = self::contentTypes['updateNote'][0])
    {
        $returnType = '\Keap\Core\V2\Model\DealNote';
        $request = $this->updateNoteRequest($note_id, $update_deal_note_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNote'
     *
     * @param  string $note_id the ID of the note to update (required)
     * @param  \Keap\Core\V2\Model\UpdateDealNoteRequest $update_deal_note_request the request body containing updated note details (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNote'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNoteRequest($note_id, $update_deal_note_request, string $contentType = self::contentTypes['updateNote'][0])
    {

        // verify the required parameter 'note_id' is set
        if ($note_id === null || (is_array($note_id) && count($note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note_id when calling updateNote'
            );
        }

        // verify the required parameter 'update_deal_note_request' is set
        if ($update_deal_note_request === null || (is_array($update_deal_note_request) && count($update_deal_note_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_deal_note_request when calling updateNote'
            );
        }


        $resourcePath = '/v2/deals/-/notes/{note_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'note_id' . '}',
                ObjectSerializer::toPathValue($note_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_deal_note_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_deal_note_request));
            } else {
                $httpBody = $update_deal_note_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
